
ota_boot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00007e0c  00000e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0c  00007000  00007000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  008001c0  00007ecc  00000f40  2**0
                  ALLOC
  3 .noinit       00000004  008002ee  00007ffa  00000f40  2**0
                  ALLOC
  4 .stab         0000225c  00000000  00000000  00000f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000161c  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007000 <save_pattern>:

// save the pattern at boot time
static uint32_t pattern __attribute__ ((section (".noinit")));
void save_pattern(void) __attribute__ ((naked)) __attribute__ ((section (".init3")));
void save_pattern(void) {
  pattern = *(uint32_t*)(PATTADDR+0);
    7000:	80 91 00 01 	lds	r24, 0x0100
    7004:	90 91 01 01 	lds	r25, 0x0101
    7008:	a0 91 02 01 	lds	r26, 0x0102
    700c:	b0 91 03 01 	lds	r27, 0x0103
    7010:	80 93 ee 02 	sts	0x02EE, r24
    7014:	90 93 ef 02 	sts	0x02EF, r25
    7018:	a0 93 f0 02 	sts	0x02F0, r26
    701c:	b0 93 f1 02 	sts	0x02F1, r27

00007020 <__do_copy_data>:
}
    7020:	11 e0       	ldi	r17, 0x01	; 1
    7022:	a0 e0       	ldi	r26, 0x00	; 0
    7024:	b1 e0       	ldi	r27, 0x01	; 1
    7026:	ec e0       	ldi	r30, 0x0C	; 12
    7028:	fe e7       	ldi	r31, 0x7E	; 126
    702a:	02 c0       	rjmp	.+4      	; 0x7030 <.do_copy_data_start>

0000702c <.do_copy_data_loop>:
    702c:	05 90       	lpm	r0, Z+
    702e:	0d 92       	st	X+, r0

00007030 <.do_copy_data_start>:
    7030:	a0 3c       	cpi	r26, 0xC0	; 192
    7032:	b1 07       	cpc	r27, r17
    7034:	d9 f7       	brne	.-10     	; 0x702c <.do_copy_data_loop>

00007036 <__do_clear_bss>:
    7036:	12 e0       	ldi	r17, 0x02	; 2
    7038:	a0 ec       	ldi	r26, 0xC0	; 192
    703a:	b1 e0       	ldi	r27, 0x01	; 1
    703c:	01 c0       	rjmp	.+2      	; 0x7040 <.do_clear_bss_start>

0000703e <.do_clear_bss_loop>:
    703e:	1d 92       	st	X+, r1

00007040 <.do_clear_bss_start>:
    7040:	ae 3e       	cpi	r26, 0xEE	; 238
    7042:	b1 07       	cpc	r27, r17
    7044:	e1 f7       	brne	.-8      	; 0x703e <.do_clear_bss_loop>

00007046 <main>:
    7046:	cd b7       	in	r28, 0x3d	; 61
    7048:	de b7       	in	r29, 0x3e	; 62
    704a:	a2 97       	sbiw	r28, 0x22	; 34
    704c:	de bf       	out	0x3e, r29	; 62
    704e:	cd bf       	out	0x3d, r28	; 61
    7050:	11 24       	eor	r1, r1
    7052:	14 b7       	in	r17, 0x34	; 52
    7054:	14 be       	out	0x34, r1	; 52
    7056:	98 e1       	ldi	r25, 0x18	; 24
    7058:	0f b6       	in	r0, 0x3f	; 63
    705a:	f8 94       	cli
    705c:	90 93 60 00 	sts	0x0060, r25
    7060:	10 92 60 00 	sts	0x0060, r1
    7064:	0f be       	out	0x3f, r0	; 63
    7066:	85 e0       	ldi	r24, 0x05	; 5
    7068:	80 93 81 00 	sts	0x0081, r24
    706c:	82 e0       	ldi	r24, 0x02	; 2
    706e:	80 93 c0 00 	sts	0x00C0, r24
    7072:	90 93 c1 00 	sts	0x00C1, r25
    7076:	86 e0       	ldi	r24, 0x06	; 6
    7078:	80 93 c2 00 	sts	0x00C2, r24
    707c:	88 e0       	ldi	r24, 0x08	; 8
    707e:	80 93 c4 00 	sts	0x00C4, r24
    7082:	15 d5       	rcall	.+2602   	; 0x7aae <loadConfig>
    7084:	b7 d4       	rcall	.+2414   	; 0x79f4 <appIsValid>
    7086:	08 2f       	mov	r16, r24
    7088:	88 23       	and	r24, r24
    708a:	49 f1       	breq	.+82     	; 0x70de <main+0x98>
    708c:	21 2f       	mov	r18, r17
    708e:	30 e0       	ldi	r19, 0x00	; 0
    7090:	c9 01       	movw	r24, r18
    7092:	85 70       	andi	r24, 0x05	; 5
    7094:	90 70       	andi	r25, 0x00	; 0
    7096:	89 2b       	or	r24, r25
    7098:	79 f4       	brne	.+30     	; 0x70b8 <main+0x72>
    709a:	13 ff       	sbrs	r17, 3
    709c:	20 c0       	rjmp	.+64     	; 0x70de <main+0x98>
    709e:	80 91 ee 02 	lds	r24, 0x02EE
    70a2:	90 91 ef 02 	lds	r25, 0x02EF
    70a6:	a0 91 f0 02 	lds	r26, 0x02F0
    70aa:	b0 91 f1 02 	lds	r27, 0x02F1
    70ae:	8f 5e       	subi	r24, 0xEF	; 239
    70b0:	9e 4b       	sbci	r25, 0xBE	; 190
    70b2:	ad 40       	sbci	r26, 0x0D	; 13
    70b4:	b0 4b       	sbci	r27, 0xB0	; 176
    70b6:	99 f4       	brne	.+38     	; 0x70de <main+0x98>
    70b8:	e0 e0       	ldi	r30, 0x00	; 0
    70ba:	f0 e0       	ldi	r31, 0x00	; 0
    70bc:	80 e8       	ldi	r24, 0x80	; 128
    70be:	0f b6       	in	r0, 0x3f	; 63
    70c0:	f8 94       	cli
    70c2:	80 93 61 00 	sts	0x0061, r24
    70c6:	e0 93 61 00 	sts	0x0061, r30
    70ca:	0f be       	out	0x3f, r0	; 63
    70cc:	80 91 d2 02 	lds	r24, 0x02D2
    70d0:	80 93 00 01 	sts	0x0100, r24
    70d4:	80 91 d3 02 	lds	r24, 0x02D3
    70d8:	80 93 01 01 	sts	0x0101, r24
    70dc:	09 95       	icall
    70de:	81 2f       	mov	r24, r17
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	11 fd       	sbrc	r17, 1
    70e4:	12 c0       	rjmp	.+36     	; 0x710a <main+0xc4>
    70e6:	9c 01       	movw	r18, r24
    70e8:	28 70       	andi	r18, 0x08	; 8
    70ea:	30 70       	andi	r19, 0x00	; 0
    70ec:	13 ff       	sbrs	r17, 3
    70ee:	17 c0       	rjmp	.+46     	; 0x711e <main+0xd8>
    70f0:	80 91 ee 02 	lds	r24, 0x02EE
    70f4:	90 91 ef 02 	lds	r25, 0x02EF
    70f8:	a0 91 f0 02 	lds	r26, 0x02F0
    70fc:	b0 91 f1 02 	lds	r27, 0x02F1
    7100:	8d 50       	subi	r24, 0x0D	; 13
    7102:	90 4f       	sbci	r25, 0xF0	; 240
    7104:	ad 4a       	sbci	r26, 0xAD	; 173
    7106:	bb 40       	sbci	r27, 0x0B	; 11
    7108:	51 f4       	brne	.+20     	; 0x711e <main+0xd8>
    710a:	10 92 e9 02 	sts	0x02E9, r1
    710e:	10 92 e8 02 	sts	0x02E8, r1
    7112:	10 92 eb 02 	sts	0x02EB, r1
    7116:	10 92 ea 02 	sts	0x02EA, r1
    711a:	32 d5       	rcall	.+2660   	; 0x7b80 <saveConfig>
    711c:	06 c0       	rjmp	.+12     	; 0x712a <main+0xe4>
    711e:	00 23       	and	r16, r16
    7120:	21 f0       	breq	.+8      	; 0x712a <main+0xe4>
    7122:	23 2b       	or	r18, r19
    7124:	11 f0       	breq	.+4      	; 0x712a <main+0xe4>
    7126:	01 e0       	ldi	r16, 0x01	; 1
    7128:	01 c0       	rjmp	.+2      	; 0x712c <main+0xe6>
    712a:	00 e0       	ldi	r16, 0x00	; 0
    712c:	82 e0       	ldi	r24, 0x02	; 2
    712e:	90 e0       	ldi	r25, 0x00	; 0
    7130:	20 e8       	ldi	r18, 0x80	; 128
    7132:	0f b6       	in	r0, 0x3f	; 63
    7134:	f8 94       	cli
    7136:	20 93 61 00 	sts	0x0061, r18
    713a:	80 93 61 00 	sts	0x0061, r24
    713e:	0f be       	out	0x3f, r0	; 63
    7140:	8e e6       	ldi	r24, 0x6E	; 110
    7142:	91 e0       	ldi	r25, 0x01	; 1
    7144:	ee d1       	rcall	.+988    	; 0x7522 <P>
    7146:	64 e1       	ldi	r22, 0x14	; 20
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	80 e0       	ldi	r24, 0x00	; 0
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	b4 d1       	rcall	.+872    	; 0x74b8 <sleep>
    7150:	88 24       	eor	r8, r8
    7152:	99 24       	eor	r9, r9
    7154:	bd e0       	ldi	r27, 0x0D	; 13
    7156:	4b 2e       	mov	r4, r27
    7158:	51 2c       	mov	r5, r1
    715a:	4c 0e       	add	r4, r28
    715c:	5d 1e       	adc	r5, r29
    715e:	a5 e0       	ldi	r26, 0x05	; 5
    7160:	2a 2e       	mov	r2, r26
    7162:	31 2c       	mov	r3, r1
    7164:	2c 0e       	add	r2, r28
    7166:	3d 1e       	adc	r3, r29
    7168:	3e 01       	movw	r6, r28
    716a:	08 94       	sec
    716c:	61 1c       	adc	r6, r1
    716e:	71 1c       	adc	r7, r1
    7170:	9e d4       	rcall	.+2364   	; 0x7aae <loadConfig>
    7172:	00 23       	and	r16, r16
    7174:	09 f0       	breq	.+2      	; 0x7178 <main+0x132>
    7176:	5c c0       	rjmp	.+184    	; 0x7230 <main+0x1ea>
    7178:	81 e0       	ldi	r24, 0x01	; 1
    717a:	63 e0       	ldi	r22, 0x03	; 3
    717c:	44 ed       	ldi	r20, 0xD4	; 212
    717e:	50 d3       	rcall	.+1696   	; 0x7820 <rf12_initialize>
    7180:	87 e7       	ldi	r24, 0x77	; 119
    7182:	91 e0       	ldi	r25, 0x01	; 1
    7184:	ce d1       	rcall	.+924    	; 0x7522 <P>
    7186:	10 92 84 02 	sts	0x0284, r1
    718a:	80 91 ce 02 	lds	r24, 0x02CE
    718e:	90 91 cf 02 	lds	r25, 0x02CF
    7192:	9e 87       	std	Y+14, r25	; 0x0e
    7194:	8d 87       	std	Y+13, r24	; 0x0d
    7196:	80 91 d2 02 	lds	r24, 0x02D2
    719a:	8f 87       	std	Y+15, r24	; 0x0f
    719c:	80 91 d3 02 	lds	r24, 0x02D3
    71a0:	88 8b       	std	Y+16, r24	; 0x10
    71a2:	1a 8a       	std	Y+18, r1	; 0x12
    71a4:	19 8a       	std	Y+17, r1	; 0x11
    71a6:	de 01       	movw	r26, r28
    71a8:	53 96       	adiw	r26, 0x13	; 19
    71aa:	e6 ed       	ldi	r30, 0xD6	; 214
    71ac:	f2 e0       	ldi	r31, 0x02	; 2
    71ae:	80 e1       	ldi	r24, 0x10	; 16
    71b0:	01 90       	ld	r0, Z+
    71b2:	0d 92       	st	X+, r0
    71b4:	81 50       	subi	r24, 0x01	; 1
    71b6:	e1 f7       	brne	.-8      	; 0x71b0 <main+0x16a>
    71b8:	c2 01       	movw	r24, r4
    71ba:	66 e1       	ldi	r22, 0x16	; 22
    71bc:	70 e0       	ldi	r23, 0x00	; 0
    71be:	40 e4       	ldi	r20, 0x40	; 64
    71c0:	50 e0       	ldi	r21, 0x00	; 0
    71c2:	65 d5       	rcall	.+2762   	; 0x7c8e <sendRequest>
    71c4:	89 2b       	or	r24, r25
    71c6:	51 f1       	breq	.+84     	; 0x721c <main+0x1d6>
    71c8:	80 91 87 02 	lds	r24, 0x0287
    71cc:	82 31       	cpi	r24, 0x12	; 18
    71ce:	59 f4       	brne	.+22     	; 0x71e6 <main+0x1a0>
    71d0:	a6 ed       	ldi	r26, 0xD6	; 214
    71d2:	b2 e0       	ldi	r27, 0x02	; 2
    71d4:	ea e8       	ldi	r30, 0x8A	; 138
    71d6:	f2 e0       	ldi	r31, 0x02	; 2
    71d8:	80 e1       	ldi	r24, 0x10	; 16
    71da:	01 90       	ld	r0, Z+
    71dc:	0d 92       	st	X+, r0
    71de:	81 50       	subi	r24, 0x01	; 1
    71e0:	e1 f7       	brne	.-8      	; 0x71da <main+0x194>
    71e2:	ce d4       	rcall	.+2460   	; 0x7b80 <saveConfig>
    71e4:	1b c0       	rjmp	.+54     	; 0x721c <main+0x1d6>
    71e6:	80 91 87 02 	lds	r24, 0x0287
    71ea:	84 31       	cpi	r24, 0x14	; 20
    71ec:	b9 f4       	brne	.+46     	; 0x721c <main+0x1d6>
    71ee:	80 91 8a 02 	lds	r24, 0x028A
    71f2:	80 93 d2 02 	sts	0x02D2, r24
    71f6:	80 91 8b 02 	lds	r24, 0x028B
    71fa:	80 93 d3 02 	sts	0x02D3, r24
    71fe:	c0 d4       	rcall	.+2432   	; 0x7b80 <saveConfig>
    7200:	8f e7       	ldi	r24, 0x7F	; 127
    7202:	91 e0       	ldi	r25, 0x01	; 1
    7204:	8e d1       	rcall	.+796    	; 0x7522 <P>
    7206:	80 91 d3 02 	lds	r24, 0x02D3
    720a:	97 d1       	rcall	.+814    	; 0x753a <P_X8>
    720c:	8d e0       	ldi	r24, 0x0D	; 13
    720e:	91 e0       	ldi	r25, 0x01	; 1
    7210:	88 d1       	rcall	.+784    	; 0x7522 <P>
    7212:	80 91 d2 02 	lds	r24, 0x02D2
    7216:	91 d1       	rcall	.+802    	; 0x753a <P_X8>
    7218:	8a e0       	ldi	r24, 0x0A	; 10
    721a:	7b d1       	rcall	.+758    	; 0x7512 <putch>
    721c:	80 91 d2 02 	lds	r24, 0x02D2
    7220:	88 23       	and	r24, r24
    7222:	21 f0       	breq	.+8      	; 0x722c <main+0x1e6>
    7224:	80 91 d3 02 	lds	r24, 0x02D3
    7228:	88 23       	and	r24, r24
    722a:	19 f4       	brne	.+6      	; 0x7232 <main+0x1ec>
    722c:	c5 d3       	rcall	.+1930   	; 0x79b8 <exponentialBackOff>
    722e:	ad cf       	rjmp	.-166    	; 0x718a <main+0x144>
    7230:	01 e0       	ldi	r16, 0x01	; 1
    7232:	80 91 d3 02 	lds	r24, 0x02D3
    7236:	63 e0       	ldi	r22, 0x03	; 3
    7238:	40 91 d2 02 	lds	r20, 0x02D2
    723c:	f1 d2       	rcall	.+1506   	; 0x7820 <rf12_initialize>
    723e:	85 e8       	ldi	r24, 0x85	; 133
    7240:	91 e0       	ldi	r25, 0x01	; 1
    7242:	6f d1       	rcall	.+734    	; 0x7522 <P>
    7244:	10 92 84 02 	sts	0x0284, r1
    7248:	19 e4       	ldi	r17, 0x49	; 73
    724a:	04 c0       	rjmp	.+8      	; 0x7254 <main+0x20e>
    724c:	11 50       	subi	r17, 0x01	; 1
    724e:	09 f4       	brne	.+2      	; 0x7252 <main+0x20c>
    7250:	93 cf       	rjmp	.-218    	; 0x7178 <main+0x132>
    7252:	b2 d3       	rcall	.+1892   	; 0x79b8 <exponentialBackOff>
    7254:	80 91 ce 02 	lds	r24, 0x02CE
    7258:	90 91 cf 02 	lds	r25, 0x02CF
    725c:	9e 83       	std	Y+6, r25	; 0x06
    725e:	8d 83       	std	Y+5, r24	; 0x05
    7260:	80 91 e6 02 	lds	r24, 0x02E6
    7264:	90 91 e7 02 	lds	r25, 0x02E7
    7268:	98 87       	std	Y+8, r25	; 0x08
    726a:	8f 83       	std	Y+7, r24	; 0x07
    726c:	80 91 e8 02 	lds	r24, 0x02E8
    7270:	90 91 e9 02 	lds	r25, 0x02E9
    7274:	9a 87       	std	Y+10, r25	; 0x0a
    7276:	89 87       	std	Y+9, r24	; 0x09
    7278:	80 91 ea 02 	lds	r24, 0x02EA
    727c:	90 91 eb 02 	lds	r25, 0x02EB
    7280:	9c 87       	std	Y+12, r25	; 0x0c
    7282:	8b 87       	std	Y+11, r24	; 0x0b
    7284:	c1 01       	movw	r24, r2
    7286:	68 e0       	ldi	r22, 0x08	; 8
    7288:	70 e0       	ldi	r23, 0x00	; 0
    728a:	40 e0       	ldi	r20, 0x00	; 0
    728c:	50 e0       	ldi	r21, 0x00	; 0
    728e:	ff d4       	rcall	.+2558   	; 0x7c8e <sendRequest>
    7290:	18 16       	cp	r1, r24
    7292:	19 06       	cpc	r1, r25
    7294:	f4 f4       	brge	.+60     	; 0x72d2 <main+0x28c>
    7296:	80 91 87 02 	lds	r24, 0x0287
    729a:	88 30       	cpi	r24, 0x08	; 8
    729c:	d1 f4       	brne	.+52     	; 0x72d2 <main+0x28c>
    729e:	80 91 8a 02 	lds	r24, 0x028A
    72a2:	90 91 8b 02 	lds	r25, 0x028B
    72a6:	90 93 e7 02 	sts	0x02E7, r25
    72aa:	80 93 e6 02 	sts	0x02E6, r24
    72ae:	80 91 8c 02 	lds	r24, 0x028C
    72b2:	90 91 8d 02 	lds	r25, 0x028D
    72b6:	90 93 e9 02 	sts	0x02E9, r25
    72ba:	80 93 e8 02 	sts	0x02E8, r24
    72be:	80 91 8e 02 	lds	r24, 0x028E
    72c2:	90 91 8f 02 	lds	r25, 0x028F
    72c6:	90 93 eb 02 	sts	0x02EB, r25
    72ca:	80 93 ea 02 	sts	0x02EA, r24
    72ce:	58 d4       	rcall	.+2224   	; 0x7b80 <saveConfig>
    72d0:	03 c0       	rjmp	.+6      	; 0x72d8 <main+0x292>
    72d2:	00 23       	and	r16, r16
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <main+0x292>
    72d6:	ba cf       	rjmp	.-140    	; 0x724c <main+0x206>
    72d8:	80 e9       	ldi	r24, 0x90	; 144
    72da:	91 e0       	ldi	r25, 0x01	; 1
    72dc:	22 d1       	rcall	.+580    	; 0x7522 <P>
    72de:	8a d3       	rcall	.+1812   	; 0x79f4 <appIsValid>
    72e0:	89 2b       	or	r24, r25
    72e2:	09 f0       	breq	.+2      	; 0x72e6 <main+0x2a0>
    72e4:	86 c0       	rjmp	.+268    	; 0x73f2 <main+0x3ac>
    72e6:	00 91 e8 02 	lds	r16, 0x02E8
    72ea:	10 91 e9 02 	lds	r17, 0x02E9
    72ee:	f4 e0       	ldi	r31, 0x04	; 4
    72f0:	00 0f       	add	r16, r16
    72f2:	11 1f       	adc	r17, r17
    72f4:	fa 95       	dec	r31
    72f6:	e1 f7       	brne	.-8      	; 0x72f0 <main+0x2aa>
    72f8:	01 5c       	subi	r16, 0xC1	; 193
    72fa:	1f 4f       	sbci	r17, 0xFF	; 255
    72fc:	e6 e0       	ldi	r30, 0x06	; 6
    72fe:	16 95       	lsr	r17
    7300:	07 95       	ror	r16
    7302:	ea 95       	dec	r30
    7304:	e1 f7       	brne	.-8      	; 0x72fe <main+0x2b8>
    7306:	cc 24       	eor	r12, r12
    7308:	dd 24       	eor	r13, r13
    730a:	ee 24       	eor	r14, r14
    730c:	ff 24       	eor	r15, r15
    730e:	54 c0       	rjmp	.+168    	; 0x73b8 <main+0x372>
    7310:	10 92 84 02 	sts	0x0284, r1
    7314:	79 e4       	ldi	r23, 0x49	; 73
    7316:	b7 2e       	mov	r11, r23
    7318:	01 c0       	rjmp	.+2      	; 0x731c <main+0x2d6>
    731a:	4e d3       	rcall	.+1692   	; 0x79b8 <exponentialBackOff>
    731c:	80 91 e6 02 	lds	r24, 0x02E6
    7320:	90 91 e7 02 	lds	r25, 0x02E7
    7324:	9a 83       	std	Y+2, r25	; 0x02
    7326:	89 83       	std	Y+1, r24	; 0x01
    7328:	dc 82       	std	Y+4, r13	; 0x04
    732a:	cb 82       	std	Y+3, r12	; 0x03
    732c:	c3 01       	movw	r24, r6
    732e:	64 e0       	ldi	r22, 0x04	; 4
    7330:	70 e0       	ldi	r23, 0x00	; 0
    7332:	40 e0       	ldi	r20, 0x00	; 0
    7334:	50 e0       	ldi	r21, 0x00	; 0
    7336:	ab d4       	rcall	.+2390   	; 0x7c8e <sendRequest>
    7338:	18 16       	cp	r1, r24
    733a:	19 06       	cpc	r1, r25
    733c:	c4 f5       	brge	.+112    	; 0x73ae <main+0x368>
    733e:	80 91 87 02 	lds	r24, 0x0287
    7342:	82 34       	cpi	r24, 0x42	; 66
    7344:	a1 f5       	brne	.+104    	; 0x73ae <main+0x368>
    7346:	8b 81       	ldd	r24, Y+3	; 0x03
    7348:	9c 81       	ldd	r25, Y+4	; 0x04
    734a:	29 81       	ldd	r18, Y+1	; 0x01
    734c:	3a 81       	ldd	r19, Y+2	; 0x02
    734e:	82 27       	eor	r24, r18
    7350:	93 27       	eor	r25, r19
    7352:	20 91 88 02 	lds	r18, 0x0288
    7356:	30 91 89 02 	lds	r19, 0x0289
    735a:	28 17       	cp	r18, r24
    735c:	39 07       	cpc	r19, r25
    735e:	39 f5       	brne	.+78     	; 0x73ae <main+0x368>
    7360:	20 e0       	ldi	r18, 0x00	; 0
    7362:	30 e0       	ldi	r19, 0x00	; 0
    7364:	90 e0       	ldi	r25, 0x00	; 0
    7366:	f9 01       	movw	r30, r18
    7368:	e6 57       	subi	r30, 0x76	; 118
    736a:	fd 4f       	sbci	r31, 0xFD	; 253
    736c:	80 81       	ld	r24, Z
    736e:	89 27       	eor	r24, r25
    7370:	80 83       	st	Z, r24
    7372:	2f 5f       	subi	r18, 0xFF	; 255
    7374:	3f 4f       	sbci	r19, 0xFF	; 255
    7376:	9d 52       	subi	r25, 0x2D	; 45
    7378:	90 3c       	cpi	r25, 0xC0	; 192
    737a:	a9 f7       	brne	.-22     	; 0x7366 <main+0x320>
    737c:	c7 01       	movw	r24, r14
    737e:	6a e8       	ldi	r22, 0x8A	; 138
    7380:	72 e0       	ldi	r23, 0x02	; 2
    7382:	40 e4       	ldi	r20, 0x40	; 64
    7384:	d2 d3       	rcall	.+1956   	; 0x7b2a <fillFlash>
    7386:	8c e9       	ldi	r24, 0x9C	; 156
    7388:	91 e0       	ldi	r25, 0x01	; 1
    738a:	cb d0       	rcall	.+406    	; 0x7522 <P>
    738c:	8b 81       	ldd	r24, Y+3	; 0x03
    738e:	d5 d0       	rcall	.+426    	; 0x753a <P_X8>
    7390:	8f e9       	ldi	r24, 0x9F	; 159
    7392:	91 e0       	ldi	r25, 0x01	; 1
    7394:	c6 d0       	rcall	.+396    	; 0x7522 <P>
    7396:	c7 01       	movw	r24, r14
    7398:	e4 d0       	rcall	.+456    	; 0x7562 <P_X16>
    739a:	8a e0       	ldi	r24, 0x0A	; 10
    739c:	ba d0       	rcall	.+372    	; 0x7512 <putch>
    739e:	08 94       	sec
    73a0:	c1 1c       	adc	r12, r1
    73a2:	d1 1c       	adc	r13, r1
    73a4:	80 e4       	ldi	r24, 0x40	; 64
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	e8 0e       	add	r14, r24
    73aa:	f9 1e       	adc	r15, r25
    73ac:	05 c0       	rjmp	.+10     	; 0x73b8 <main+0x372>
    73ae:	ba 94       	dec	r11
    73b0:	09 f0       	breq	.+2      	; 0x73b4 <main+0x36e>
    73b2:	b3 cf       	rjmp	.-154    	; 0x731a <main+0x2d4>
    73b4:	00 e0       	ldi	r16, 0x00	; 0
    73b6:	e0 ce       	rjmp	.-576    	; 0x7178 <main+0x132>
    73b8:	c0 16       	cp	r12, r16
    73ba:	d1 06       	cpc	r13, r17
    73bc:	0c f4       	brge	.+2      	; 0x73c0 <main+0x37a>
    73be:	a8 cf       	rjmp	.-176    	; 0x7310 <main+0x2ca>
    73c0:	78 01       	movw	r14, r16
    73c2:	66 e0       	ldi	r22, 0x06	; 6
    73c4:	ee 0c       	add	r14, r14
    73c6:	ff 1c       	adc	r15, r15
    73c8:	6a 95       	dec	r22
    73ca:	e1 f7       	brne	.-8      	; 0x73c4 <main+0x37e>
    73cc:	87 01       	movw	r16, r14
    73ce:	0f 77       	andi	r16, 0x7F	; 127
    73d0:	10 70       	andi	r17, 0x00	; 0
    73d2:	e6 fe       	sbrs	r14, 6
    73d4:	0e c0       	rjmp	.+28     	; 0x73f2 <main+0x3ac>
    73d6:	40 e8       	ldi	r20, 0x80	; 128
    73d8:	50 e0       	ldi	r21, 0x00	; 0
    73da:	40 1b       	sub	r20, r16
    73dc:	51 0b       	sbc	r21, r17
    73de:	c8 01       	movw	r24, r16
    73e0:	8c 53       	subi	r24, 0x3C	; 60
    73e2:	9e 4f       	sbci	r25, 0xFE	; 254
    73e4:	6f ef       	ldi	r22, 0xFF	; 255
    73e6:	70 e0       	ldi	r23, 0x00	; 0
    73e8:	ae d4       	rcall	.+2396   	; 0x7d46 <memset>
    73ea:	c7 01       	movw	r24, r14
    73ec:	80 1b       	sub	r24, r16
    73ee:	91 0b       	sbc	r25, r17
    73f0:	b6 d2       	rcall	.+1388   	; 0x795e <writeFlash>
    73f2:	82 ea       	ldi	r24, 0xA2	; 162
    73f4:	91 e0       	ldi	r25, 0x01	; 1
    73f6:	95 d0       	rcall	.+298    	; 0x7522 <P>
    73f8:	fd d2       	rcall	.+1530   	; 0x79f4 <appIsValid>
    73fa:	89 2b       	or	r24, r25
    73fc:	b9 f4       	brne	.+46     	; 0x742c <main+0x3e6>
    73fe:	8c ea       	ldi	r24, 0xAC	; 172
    7400:	91 e0       	ldi	r25, 0x01	; 1
    7402:	8f d0       	rcall	.+286    	; 0x7522 <P>
    7404:	94 01       	movw	r18, r8
    7406:	2f 70       	andi	r18, 0x0F	; 15
    7408:	30 70       	andi	r19, 0x00	; 0
    740a:	64 e6       	ldi	r22, 0x64	; 100
    740c:	70 e0       	ldi	r23, 0x00	; 0
    740e:	80 e0       	ldi	r24, 0x00	; 0
    7410:	90 e0       	ldi	r25, 0x00	; 0
    7412:	04 c0       	rjmp	.+8      	; 0x741c <main+0x3d6>
    7414:	66 0f       	add	r22, r22
    7416:	77 1f       	adc	r23, r23
    7418:	88 1f       	adc	r24, r24
    741a:	99 1f       	adc	r25, r25
    741c:	2a 95       	dec	r18
    741e:	d2 f7       	brpl	.-12     	; 0x7414 <main+0x3ce>
    7420:	4b d0       	rcall	.+150    	; 0x74b8 <sleep>
    7422:	08 94       	sec
    7424:	81 1c       	adc	r8, r1
    7426:	91 1c       	adc	r9, r1
    7428:	00 e0       	ldi	r16, 0x00	; 0
    742a:	a2 ce       	rjmp	.-700    	; 0x7170 <main+0x12a>
    742c:	8a eb       	ldi	r24, 0xBA	; 186
    742e:	91 e0       	ldi	r25, 0x01	; 1
    7430:	78 d0       	rcall	.+240    	; 0x7522 <P>
    7432:	80 e0       	ldi	r24, 0x00	; 0
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	20 e8       	ldi	r18, 0x80	; 128
    7438:	0f b6       	in	r0, 0x3f	; 63
    743a:	f8 94       	cli
    743c:	20 93 61 00 	sts	0x0061, r18
    7440:	80 93 61 00 	sts	0x0061, r24
    7444:	0f be       	out	0x3f, r0	; 63
    7446:	8f ee       	ldi	r24, 0xEF	; 239
    7448:	9e eb       	ldi	r25, 0xBE	; 190
    744a:	ad e0       	ldi	r26, 0x0D	; 13
    744c:	b0 eb       	ldi	r27, 0xB0	; 176
    744e:	80 93 00 01 	sts	0x0100, r24
    7452:	90 93 01 01 	sts	0x0101, r25
    7456:	a0 93 02 01 	sts	0x0102, r26
    745a:	b0 93 03 01 	sts	0x0103, r27
    745e:	28 e0       	ldi	r18, 0x08	; 8
    7460:	88 e1       	ldi	r24, 0x18	; 24
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	0f b6       	in	r0, 0x3f	; 63
    7466:	f8 94       	cli
    7468:	a8 95       	wdr
    746a:	80 93 60 00 	sts	0x0060, r24
    746e:	0f be       	out	0x3f, r0	; 63
    7470:	20 93 60 00 	sts	0x0060, r18
    7474:	ff cf       	rjmp	.-2      	; 0x7474 <main+0x42e>

00007476 <timer_start>:
/* Timer 1 used for network time-out and for blinking LEDs */
static void timer_init() {
  TCCR1B = _BV(CS12) | _BV(CS10);            // div 1024 -- @4Mhz=3906Hz
}
static void timer_start(int16_t millis) {
  TCNT1 = -(4000L * (int32_t)millis / 1024); // 4000=4Mhz/1000, 1024=clk divider
    7476:	aa 27       	eor	r26, r26
    7478:	97 fd       	sbrc	r25, 7
    747a:	a0 95       	com	r26
    747c:	ba 2f       	mov	r27, r26
    747e:	bc 01       	movw	r22, r24
    7480:	cd 01       	movw	r24, r26
    7482:	20 ea       	ldi	r18, 0xA0	; 160
    7484:	3f e0       	ldi	r19, 0x0F	; 15
    7486:	40 e0       	ldi	r20, 0x00	; 0
    7488:	50 e0       	ldi	r21, 0x00	; 0
    748a:	64 d4       	rcall	.+2248   	; 0x7d54 <__mulsi3>
    748c:	20 e0       	ldi	r18, 0x00	; 0
    748e:	34 e0       	ldi	r19, 0x04	; 4
    7490:	40 e0       	ldi	r20, 0x00	; 0
    7492:	50 e0       	ldi	r21, 0x00	; 0
    7494:	7e d4       	rcall	.+2300   	; 0x7d92 <__divmodsi4>
    7496:	50 95       	com	r21
    7498:	40 95       	com	r20
    749a:	30 95       	com	r19
    749c:	21 95       	neg	r18
    749e:	3f 4f       	sbci	r19, 0xFF	; 255
    74a0:	4f 4f       	sbci	r20, 0xFF	; 255
    74a2:	5f 4f       	sbci	r21, 0xFF	; 255
    74a4:	30 93 85 00 	sts	0x0085, r19
    74a8:	20 93 84 00 	sts	0x0084, r18
  TIFR1 = _BV(TOV1);                         // clear overflow flag
    74ac:	81 e0       	ldi	r24, 0x01	; 1
    74ae:	86 bb       	out	0x16, r24	; 22
}
    74b0:	08 95       	ret

000074b2 <timer_done>:

static uint8_t timer_done() {
  return TIFR1 & _BV(TOV1);
    74b2:	86 b3       	in	r24, 0x16	; 22
}
    74b4:	81 70       	andi	r24, 0x01	; 1
    74b6:	08 95       	ret

000074b8 <sleep>:

// TODO: LOW POWER! This needs to power down when sleeping!
static void sleep(uint32_t ms) {
    74b8:	ef 92       	push	r14
    74ba:	ff 92       	push	r15
    74bc:	0f 93       	push	r16
    74be:	1f 93       	push	r17
    74c0:	7b 01       	movw	r14, r22
    74c2:	8c 01       	movw	r16, r24
    74c4:	0e c0       	rjmp	.+28     	; 0x74e2 <sleep+0x2a>
  while(ms > 1000) {
    timer_start(1000);
    74c6:	88 ee       	ldi	r24, 0xE8	; 232
    74c8:	93 e0       	ldi	r25, 0x03	; 3
    74ca:	d5 df       	rcall	.-86     	; 0x7476 <timer_start>
    while (!timer_done())
    74cc:	f2 df       	rcall	.-28     	; 0x74b2 <timer_done>
    74ce:	88 23       	and	r24, r24
    74d0:	e9 f3       	breq	.-6      	; 0x74cc <sleep+0x14>
      ;
    ms -= 1000;
    74d2:	88 e1       	ldi	r24, 0x18	; 24
    74d4:	9c ef       	ldi	r25, 0xFC	; 252
    74d6:	af ef       	ldi	r26, 0xFF	; 255
    74d8:	bf ef       	ldi	r27, 0xFF	; 255
    74da:	e8 0e       	add	r14, r24
    74dc:	f9 1e       	adc	r15, r25
    74de:	0a 1f       	adc	r16, r26
    74e0:	1b 1f       	adc	r17, r27
  return TIFR1 & _BV(TOV1);
}

// TODO: LOW POWER! This needs to power down when sleeping!
static void sleep(uint32_t ms) {
  while(ms > 1000) {
    74e2:	99 ee       	ldi	r25, 0xE9	; 233
    74e4:	e9 16       	cp	r14, r25
    74e6:	93 e0       	ldi	r25, 0x03	; 3
    74e8:	f9 06       	cpc	r15, r25
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	09 07       	cpc	r16, r25
    74ee:	90 e0       	ldi	r25, 0x00	; 0
    74f0:	19 07       	cpc	r17, r25
    74f2:	48 f7       	brcc	.-46     	; 0x74c6 <sleep+0xe>
    timer_start(1000);
    while (!timer_done())
      ;
    ms -= 1000;
  }
  if (ms > 0) {
    74f4:	e1 14       	cp	r14, r1
    74f6:	f1 04       	cpc	r15, r1
    74f8:	01 05       	cpc	r16, r1
    74fa:	11 05       	cpc	r17, r1
    74fc:	29 f0       	breq	.+10     	; 0x7508 <sleep+0x50>
    timer_start(ms);
    74fe:	c7 01       	movw	r24, r14
    7500:	ba df       	rcall	.-140    	; 0x7476 <timer_start>
    while (!timer_done())
    7502:	d7 df       	rcall	.-82     	; 0x74b2 <timer_done>
    7504:	88 23       	and	r24, r24
    7506:	e9 f3       	breq	.-6      	; 0x7502 <sleep+0x4a>
      ;
  }
}
    7508:	1f 91       	pop	r17
    750a:	0f 91       	pop	r16
    750c:	ff 90       	pop	r15
    750e:	ef 90       	pop	r14
    7510:	08 95       	ret

00007512 <putch>:
# define UART_SRC UCSR0C
# define UART_SRL UBRR0L
# define UART_UDR UDR0

// print character
static void putch(char ch) {
    7512:	98 2f       	mov	r25, r24
  while (!(UART_SRA & _BV(UDRE0)));
    7514:	80 91 c0 00 	lds	r24, 0x00C0
    7518:	85 ff       	sbrs	r24, 5
    751a:	fc cf       	rjmp	.-8      	; 0x7514 <putch+0x2>
  UART_UDR = ch;
    751c:	90 93 c6 00 	sts	0x00C6, r25
}
    7520:	08 95       	ret

00007522 <P>:
// print string
static void P(char *str) {
    7522:	cf 93       	push	r28
    7524:	df 93       	push	r29
    7526:	ec 01       	movw	r28, r24
    7528:	02 c0       	rjmp	.+4      	; 0x752e <P+0xc>
	while (*str) putch(*str++);
    752a:	21 96       	adiw	r28, 0x01	; 1
    752c:	f2 df       	rcall	.-28     	; 0x7512 <putch>
    752e:	88 81       	ld	r24, Y
    7530:	88 23       	and	r24, r24
    7532:	d9 f7       	brne	.-10     	; 0x752a <P+0x8>
}
    7534:	df 91       	pop	r29
    7536:	cf 91       	pop	r28
    7538:	08 95       	ret

0000753a <P_X8>:
// print newline
static inline void P_LN(void) { putch('\n'); }
// print byte in hex
static void P_X8(uint8_t v) {
    753a:	1f 93       	push	r17
    753c:	18 2f       	mov	r17, r24
	uint8_t vh = v>>4;
    753e:	82 95       	swap	r24
    7540:	8f 70       	andi	r24, 0x0F	; 15
	putch(vh>9 ? vh+'a'-10 : vh+'0');
    7542:	8a 30       	cpi	r24, 0x0A	; 10
    7544:	10 f0       	brcs	.+4      	; 0x754a <P_X8+0x10>
    7546:	89 5a       	subi	r24, 0xA9	; 169
    7548:	01 c0       	rjmp	.+2      	; 0x754c <P_X8+0x12>
    754a:	80 5d       	subi	r24, 0xD0	; 208
    754c:	e2 df       	rcall	.-60     	; 0x7512 <putch>
	uint8_t vl = v & 0xf;
    754e:	81 2f       	mov	r24, r17
    7550:	8f 70       	andi	r24, 0x0F	; 15
	putch(vl>9 ? vl+'a'-10 : vl+'0');
    7552:	8a 30       	cpi	r24, 0x0A	; 10
    7554:	10 f0       	brcs	.+4      	; 0x755a <P_X8+0x20>
    7556:	89 5a       	subi	r24, 0xA9	; 169
    7558:	01 c0       	rjmp	.+2      	; 0x755c <P_X8+0x22>
    755a:	80 5d       	subi	r24, 0xD0	; 208
    755c:	da df       	rcall	.-76     	; 0x7512 <putch>
}
    755e:	1f 91       	pop	r17
    7560:	08 95       	ret

00007562 <P_X16>:
// print word in hex
static void P_X16(uint16_t v) {
    7562:	0f 93       	push	r16
    7564:	1f 93       	push	r17
    7566:	8c 01       	movw	r16, r24
	P_X8(v>>8);
    7568:	81 2f       	mov	r24, r17
    756a:	99 27       	eor	r25, r25
    756c:	e6 df       	rcall	.-52     	; 0x753a <P_X8>
	P_X8(v&0xFF);
    756e:	80 2f       	mov	r24, r16
    7570:	e4 df       	rcall	.-56     	; 0x753a <P_X8>
}
    7572:	1f 91       	pop	r17
    7574:	0f 91       	pop	r16
    7576:	08 95       	ret

00007578 <rf12_byte>:
  wdt_enable(WDTO_15MS);
  for (;;)
    ;
}
    7578:	8e bd       	out	0x2e, r24	; 46
    757a:	0d b4       	in	r0, 0x2d	; 45
    757c:	07 fe       	sbrs	r0, 7
    757e:	fd cf       	rjmp	.-6      	; 0x757a <rf12_byte+0x2>
    7580:	8e b5       	in	r24, 0x2e	; 46
    7582:	08 95       	ret

00007584 <rf12_xfer>:
    7584:	ef 92       	push	r14
    7586:	ff 92       	push	r15
    7588:	0f 93       	push	r16
    758a:	1f 93       	push	r17
    758c:	7c 01       	movw	r14, r24
    758e:	2a 98       	cbi	0x05, 2	; 5
    7590:	89 2f       	mov	r24, r25
    7592:	99 27       	eor	r25, r25
    7594:	f1 df       	rcall	.-30     	; 0x7578 <rf12_byte>
    7596:	08 2f       	mov	r16, r24
    7598:	10 e0       	ldi	r17, 0x00	; 0
    759a:	10 2f       	mov	r17, r16
    759c:	00 27       	eor	r16, r16
    759e:	8e 2d       	mov	r24, r14
    75a0:	eb df       	rcall	.-42     	; 0x7578 <rf12_byte>
    75a2:	2a 9a       	sbi	0x05, 2	; 5
    75a4:	90 e0       	ldi	r25, 0x00	; 0
    75a6:	80 2b       	or	r24, r16
    75a8:	91 2b       	or	r25, r17
    75aa:	1f 91       	pop	r17
    75ac:	0f 91       	pop	r16
    75ae:	ff 90       	pop	r15
    75b0:	ef 90       	pop	r14
    75b2:	08 95       	ret

000075b4 <rf12_recvDone>:
    75b4:	89 b1       	in	r24, 0x09	; 9
    75b6:	86 95       	lsr	r24
    75b8:	86 95       	lsr	r24
    75ba:	80 fd       	sbrc	r24, 0
    75bc:	c0 c0       	rjmp	.+384    	; 0x773e <rf12_recvDone+0x18a>
    75be:	80 e0       	ldi	r24, 0x00	; 0
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	e0 df       	rcall	.-64     	; 0x7584 <rf12_xfer>
    75c4:	80 91 c3 01 	lds	r24, 0x01C3
    75c8:	85 30       	cpi	r24, 0x05	; 5
    75ca:	09 f0       	breq	.+2      	; 0x75ce <rf12_recvDone+0x1a>
    75cc:	51 c0       	rjmp	.+162    	; 0x7670 <rf12_recvDone+0xbc>
    75ce:	80 e0       	ldi	r24, 0x00	; 0
    75d0:	90 eb       	ldi	r25, 0xB0	; 176
    75d2:	d8 df       	rcall	.-80     	; 0x7584 <rf12_xfer>
    75d4:	28 2f       	mov	r18, r24
    75d6:	80 91 c2 01 	lds	r24, 0x01C2
    75da:	88 23       	and	r24, r24
    75dc:	71 f4       	brne	.+28     	; 0x75fa <rf12_recvDone+0x46>
    75de:	90 91 c1 01 	lds	r25, 0x01C1
    75e2:	99 23       	and	r25, r25
    75e4:	51 f0       	breq	.+20     	; 0x75fa <rf12_recvDone+0x46>
    75e6:	80 91 c2 01 	lds	r24, 0x01C2
    75ea:	e8 2f       	mov	r30, r24
    75ec:	f0 e0       	ldi	r31, 0x00	; 0
    75ee:	eb 57       	subi	r30, 0x7B	; 123
    75f0:	fd 4f       	sbci	r31, 0xFD	; 253
    75f2:	90 83       	st	Z, r25
    75f4:	8f 5f       	subi	r24, 0xFF	; 255
    75f6:	80 93 c2 01 	sts	0x01C2, r24
    75fa:	80 91 c2 01 	lds	r24, 0x01C2
    75fe:	e8 2f       	mov	r30, r24
    7600:	f0 e0       	ldi	r31, 0x00	; 0
    7602:	eb 57       	subi	r30, 0x7B	; 123
    7604:	fd 4f       	sbci	r31, 0xFD	; 253
    7606:	20 83       	st	Z, r18
    7608:	8f 5f       	subi	r24, 0xFF	; 255
    760a:	80 93 c2 01 	sts	0x01C2, r24
    760e:	80 91 cc 02 	lds	r24, 0x02CC
    7612:	90 91 cd 02 	lds	r25, 0x02CD
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    7616:	82 27       	eor	r24, r18
    7618:	28 2f       	mov	r18, r24
    761a:	22 95       	swap	r18
    761c:	28 27       	eor	r18, r24
    761e:	02 2e       	mov	r0, r18
    7620:	26 95       	lsr	r18
    7622:	26 95       	lsr	r18
    7624:	20 25       	eor	r18, r0
    7626:	02 2e       	mov	r0, r18
    7628:	26 95       	lsr	r18
    762a:	20 25       	eor	r18, r0
    762c:	27 70       	andi	r18, 0x07	; 7
    762e:	08 2e       	mov	r0, r24
    7630:	89 2f       	mov	r24, r25
    7632:	26 95       	lsr	r18
    7634:	07 94       	ror	r0
    7636:	27 95       	ror	r18
    7638:	90 2d       	mov	r25, r0
    763a:	82 27       	eor	r24, r18
    763c:	06 94       	lsr	r0
    763e:	27 95       	ror	r18
    7640:	90 25       	eor	r25, r0
    7642:	82 27       	eor	r24, r18
    7644:	90 93 cd 02 	sts	0x02CD, r25
    7648:	80 93 cc 02 	sts	0x02CC, r24
    764c:	80 91 87 02 	lds	r24, 0x0287
    7650:	20 91 c2 01 	lds	r18, 0x01C2
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	04 96       	adiw	r24, 0x04	; 4
    7658:	30 e0       	ldi	r19, 0x00	; 0
    765a:	82 17       	cp	r24, r18
    765c:	93 07       	cpc	r25, r19
    765e:	2c f0       	brlt	.+10     	; 0x766a <rf12_recvDone+0xb6>
    7660:	80 91 c2 01 	lds	r24, 0x01C2
    7664:	87 34       	cpi	r24, 0x47	; 71
    7666:	08 f4       	brcc	.+2      	; 0x766a <rf12_recvDone+0xb6>
    7668:	6a c0       	rjmp	.+212    	; 0x773e <rf12_recvDone+0x18a>
    766a:	8d e0       	ldi	r24, 0x0D	; 13
    766c:	92 e8       	ldi	r25, 0x82	; 130
    766e:	66 c0       	rjmp	.+204    	; 0x773c <rf12_recvDone+0x188>
    7670:	80 91 c3 01 	lds	r24, 0x01C3
    7674:	87 ff       	sbrs	r24, 7
    7676:	2e c0       	rjmp	.+92     	; 0x76d4 <rf12_recvDone+0x120>
    7678:	e0 91 87 02 	lds	r30, 0x0287
    767c:	80 91 c3 01 	lds	r24, 0x01C3
    7680:	8f 5f       	subi	r24, 0xFF	; 255
    7682:	80 93 c3 01 	sts	0x01C3, r24
    7686:	81 50       	subi	r24, 0x01	; 1
    7688:	ed 5f       	subi	r30, 0xFD	; 253
    768a:	e8 0f       	add	r30, r24
    768c:	f0 e0       	ldi	r31, 0x00	; 0
    768e:	eb 57       	subi	r30, 0x7B	; 123
    7690:	fd 4f       	sbci	r31, 0xFD	; 253
    7692:	e0 81       	ld	r30, Z
    7694:	80 91 cc 02 	lds	r24, 0x02CC
    7698:	90 91 cd 02 	lds	r25, 0x02CD
    769c:	8e 27       	eor	r24, r30
    769e:	28 2f       	mov	r18, r24
    76a0:	22 95       	swap	r18
    76a2:	28 27       	eor	r18, r24
    76a4:	02 2e       	mov	r0, r18
    76a6:	26 95       	lsr	r18
    76a8:	26 95       	lsr	r18
    76aa:	20 25       	eor	r18, r0
    76ac:	02 2e       	mov	r0, r18
    76ae:	26 95       	lsr	r18
    76b0:	20 25       	eor	r18, r0
    76b2:	27 70       	andi	r18, 0x07	; 7
    76b4:	08 2e       	mov	r0, r24
    76b6:	89 2f       	mov	r24, r25
    76b8:	26 95       	lsr	r18
    76ba:	07 94       	ror	r0
    76bc:	27 95       	ror	r18
    76be:	90 2d       	mov	r25, r0
    76c0:	82 27       	eor	r24, r18
    76c2:	06 94       	lsr	r0
    76c4:	27 95       	ror	r18
    76c6:	90 25       	eor	r25, r0
    76c8:	82 27       	eor	r24, r18
    76ca:	90 93 cd 02 	sts	0x02CD, r25
    76ce:	80 93 cc 02 	sts	0x02CC, r24
    76d2:	30 c0       	rjmp	.+96     	; 0x7734 <rf12_recvDone+0x180>
    76d4:	80 91 c3 01 	lds	r24, 0x01C3
    76d8:	8f 5f       	subi	r24, 0xFF	; 255
    76da:	80 93 c3 01 	sts	0x01C3, r24
    76de:	81 50       	subi	r24, 0x01	; 1
    76e0:	83 30       	cpi	r24, 0x03	; 3
    76e2:	21 f1       	breq	.+72     	; 0x772c <rf12_recvDone+0x178>
    76e4:	84 30       	cpi	r24, 0x04	; 4
    76e6:	2c f4       	brge	.+10     	; 0x76f2 <rf12_recvDone+0x13e>
    76e8:	88 23       	and	r24, r24
    76ea:	99 f0       	breq	.+38     	; 0x7712 <rf12_recvDone+0x15e>
    76ec:	81 30       	cpi	r24, 0x01	; 1
    76ee:	09 f5       	brne	.+66     	; 0x7732 <rf12_recvDone+0x17e>
    76f0:	15 c0       	rjmp	.+42     	; 0x771c <rf12_recvDone+0x168>
    76f2:	89 30       	cpi	r24, 0x09	; 9
    76f4:	19 f0       	breq	.+6      	; 0x76fc <rf12_recvDone+0x148>
    76f6:	8a 30       	cpi	r24, 0x0A	; 10
    76f8:	e1 f4       	brne	.+56     	; 0x7732 <rf12_recvDone+0x17e>
    76fa:	02 c0       	rjmp	.+4      	; 0x7700 <rf12_recvDone+0x14c>
    76fc:	ed e2       	ldi	r30, 0x2D	; 45
    76fe:	1a c0       	rjmp	.+52     	; 0x7734 <rf12_recvDone+0x180>
    7700:	e0 91 85 02 	lds	r30, 0x0285
    7704:	90 91 87 02 	lds	r25, 0x0287
    7708:	8e ef       	ldi	r24, 0xFE	; 254
    770a:	89 1b       	sub	r24, r25
    770c:	80 93 c3 01 	sts	0x01C3, r24
    7710:	11 c0       	rjmp	.+34     	; 0x7734 <rf12_recvDone+0x180>
    7712:	80 91 cc 02 	lds	r24, 0x02CC
    7716:	90 91 cd 02 	lds	r25, 0x02CD
    771a:	06 c0       	rjmp	.+12     	; 0x7728 <rf12_recvDone+0x174>
    771c:	80 91 cc 02 	lds	r24, 0x02CC
    7720:	90 91 cd 02 	lds	r25, 0x02CD
    7724:	89 2f       	mov	r24, r25
    7726:	99 27       	eor	r25, r25
    7728:	e8 2f       	mov	r30, r24
    772a:	04 c0       	rjmp	.+8      	; 0x7734 <rf12_recvDone+0x180>
    772c:	8d e0       	ldi	r24, 0x0D	; 13
    772e:	92 e8       	ldi	r25, 0x82	; 130
    7730:	29 df       	rcall	.-430    	; 0x7584 <rf12_xfer>
    7732:	ea ea       	ldi	r30, 0xAA	; 170
    7734:	8e 2f       	mov	r24, r30
    7736:	90 e0       	ldi	r25, 0x00	; 0
    7738:	80 50       	subi	r24, 0x00	; 0
    773a:	98 44       	sbci	r25, 0x48	; 72
    773c:	23 df       	rcall	.-442    	; 0x7584 <rf12_xfer>
    773e:	80 91 c3 01 	lds	r24, 0x01C3
    7742:	85 30       	cpi	r24, 0x05	; 5
    7744:	99 f5       	brne	.+102    	; 0x77ac <rf12_recvDone+0x1f8>
    7746:	80 91 87 02 	lds	r24, 0x0287
    774a:	20 91 c2 01 	lds	r18, 0x01C2
    774e:	90 e0       	ldi	r25, 0x00	; 0
    7750:	04 96       	adiw	r24, 0x04	; 4
    7752:	30 e0       	ldi	r19, 0x00	; 0
    7754:	82 17       	cp	r24, r18
    7756:	93 07       	cpc	r25, r19
    7758:	24 f0       	brlt	.+8      	; 0x7762 <rf12_recvDone+0x1ae>
    775a:	80 91 c2 01 	lds	r24, 0x01C2
    775e:	87 34       	cpi	r24, 0x47	; 71
    7760:	28 f1       	brcs	.+74     	; 0x77ac <rf12_recvDone+0x1f8>
    7762:	84 e0       	ldi	r24, 0x04	; 4
    7764:	80 93 c3 01 	sts	0x01C3, r24
    7768:	80 91 87 02 	lds	r24, 0x0287
    776c:	83 34       	cpi	r24, 0x43	; 67
    776e:	30 f0       	brcs	.+12     	; 0x777c <rf12_recvDone+0x1c8>
    7770:	81 e0       	ldi	r24, 0x01	; 1
    7772:	90 e0       	ldi	r25, 0x00	; 0
    7774:	90 93 cd 02 	sts	0x02CD, r25
    7778:	80 93 cc 02 	sts	0x02CC, r24
    777c:	80 91 86 02 	lds	r24, 0x0286
    7780:	86 ff       	sbrs	r24, 6
    7782:	4c c0       	rjmp	.+152    	; 0x781c <rf12_recvDone+0x268>
    7784:	80 91 c0 01 	lds	r24, 0x01C0
    7788:	28 2f       	mov	r18, r24
    778a:	30 e0       	ldi	r19, 0x00	; 0
    778c:	c9 01       	movw	r24, r18
    778e:	8f 71       	andi	r24, 0x1F	; 31
    7790:	90 70       	andi	r25, 0x00	; 0
    7792:	4f 97       	sbiw	r24, 0x1f	; 31
    7794:	09 f4       	brne	.+2      	; 0x7798 <rf12_recvDone+0x1e4>
    7796:	42 c0       	rjmp	.+132    	; 0x781c <rf12_recvDone+0x268>
    7798:	80 91 86 02 	lds	r24, 0x0286
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	82 27       	eor	r24, r18
    77a0:	93 27       	eor	r25, r19
    77a2:	8f 71       	andi	r24, 0x1F	; 31
    77a4:	90 70       	andi	r25, 0x00	; 0
    77a6:	89 2b       	or	r24, r25
    77a8:	09 f4       	brne	.+2      	; 0x77ac <rf12_recvDone+0x1f8>
    77aa:	38 c0       	rjmp	.+112    	; 0x781c <rf12_recvDone+0x268>
    77ac:	80 91 c3 01 	lds	r24, 0x01C3
    77b0:	84 30       	cpi	r24, 0x04	; 4
    77b2:	09 f0       	breq	.+2      	; 0x77b6 <rf12_recvDone+0x202>
    77b4:	31 c0       	rjmp	.+98     	; 0x7818 <rf12_recvDone+0x264>
    77b6:	10 92 87 02 	sts	0x0287, r1
    77ba:	80 91 87 02 	lds	r24, 0x0287
    77be:	80 93 c2 01 	sts	0x01C2, r24
    77c2:	8f ef       	ldi	r24, 0xFF	; 255
    77c4:	9f ef       	ldi	r25, 0xFF	; 255
    77c6:	90 93 cd 02 	sts	0x02CD, r25
    77ca:	80 93 cc 02 	sts	0x02CC, r24
    77ce:	20 91 c1 01 	lds	r18, 0x01C1
    77d2:	22 23       	and	r18, r18
    77d4:	d9 f0       	breq	.+54     	; 0x780c <rf12_recvDone+0x258>
    77d6:	82 27       	eor	r24, r18
    77d8:	28 2f       	mov	r18, r24
    77da:	22 95       	swap	r18
    77dc:	28 27       	eor	r18, r24
    77de:	02 2e       	mov	r0, r18
    77e0:	26 95       	lsr	r18
    77e2:	26 95       	lsr	r18
    77e4:	20 25       	eor	r18, r0
    77e6:	02 2e       	mov	r0, r18
    77e8:	26 95       	lsr	r18
    77ea:	20 25       	eor	r18, r0
    77ec:	27 70       	andi	r18, 0x07	; 7
    77ee:	08 2e       	mov	r0, r24
    77f0:	89 2f       	mov	r24, r25
    77f2:	26 95       	lsr	r18
    77f4:	07 94       	ror	r0
    77f6:	27 95       	ror	r18
    77f8:	90 2d       	mov	r25, r0
    77fa:	82 27       	eor	r24, r18
    77fc:	06 94       	lsr	r0
    77fe:	27 95       	ror	r18
    7800:	90 25       	eor	r25, r0
    7802:	82 27       	eor	r24, r18
    7804:	90 93 cd 02 	sts	0x02CD, r25
    7808:	80 93 cc 02 	sts	0x02CC, r24
    780c:	85 e0       	ldi	r24, 0x05	; 5
    780e:	80 93 c3 01 	sts	0x01C3, r24
    7812:	8d ed       	ldi	r24, 0xDD	; 221
    7814:	92 e8       	ldi	r25, 0x82	; 130
    7816:	b6 de       	rcall	.-660    	; 0x7584 <rf12_xfer>
    7818:	80 e0       	ldi	r24, 0x00	; 0
    781a:	08 95       	ret
    781c:	81 e0       	ldi	r24, 0x01	; 1
    781e:	08 95       	ret

00007820 <rf12_initialize>:
    7820:	ff 92       	push	r15
    7822:	0f 93       	push	r16
    7824:	1f 93       	push	r17
    7826:	18 2f       	mov	r17, r24
    7828:	f6 2e       	mov	r15, r22
    782a:	04 2f       	mov	r16, r20
    782c:	80 93 c0 01 	sts	0x01C0, r24
    7830:	40 93 c1 01 	sts	0x01C1, r20
    7834:	80 e0       	ldi	r24, 0x00	; 0
    7836:	91 e0       	ldi	r25, 0x01	; 1
    7838:	74 de       	rcall	.-792    	; 0x7522 <P>
    783a:	81 2f       	mov	r24, r17
    783c:	7e de       	rcall	.-772    	; 0x753a <P_X8>
    783e:	89 e0       	ldi	r24, 0x09	; 9
    7840:	91 e0       	ldi	r25, 0x01	; 1
    7842:	6f de       	rcall	.-802    	; 0x7522 <P>
    7844:	8f 2d       	mov	r24, r15
    7846:	79 de       	rcall	.-782    	; 0x753a <P_X8>
    7848:	8d e0       	ldi	r24, 0x0D	; 13
    784a:	91 e0       	ldi	r25, 0x01	; 1
    784c:	6a de       	rcall	.-812    	; 0x7522 <P>
    784e:	80 2f       	mov	r24, r16
    7850:	74 de       	rcall	.-792    	; 0x753a <P_X8>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    7852:	8a e0       	ldi	r24, 0x0A	; 10
    7854:	5e de       	rcall	.-836    	; 0x7512 <putch>
    ((void(*)()) 0)(); // Jump to RST vector
  }

  byte quick = 0;
  // we're gonna zero the target software ID to force an upgrade if we have an external reset
  // or a WDT reset with pattern B in RAM
    7856:	2a 9a       	sbi	0x05, 2	; 5
  if (cause & (1<<EXTRF) || ( (cause & (1<<WDRF) && isPatternB()) )) {
    7858:	22 9a       	sbi	0x04, 2	; 4
    appInvalidate();
  // we do a single upgrade check and then run the sketch if we have a WDT reset and no RAM pattern
    785a:	22 9a       	sbi	0x04, 2	; 4
  } else if (valid && (cause & (1<<WDRF))) {
    quick = 1;
  }

  // switch to 4 MHz, the minimum rate needed to use the RFM12B
    785c:	84 b1       	in	r24, 0x04	; 4
    785e:	8c 63       	ori	r24, 0x3C	; 60
    7860:	84 b9       	out	0x04, r24	; 4

  flash_led(4); // 2 flashes
  P("\n\nBOOT!\n");

  bootLoader(quick);

    7862:	81 e5       	ldi	r24, 0x51	; 81
    7864:	8c bd       	out	0x2c, r24	; 44
  // force a clean reset to launch the actual code
    7866:	8d b5       	in	r24, 0x2d	; 45
    7868:	81 60       	ori	r24, 0x01	; 1
    786a:	8d bd       	out	0x2d, r24	; 45
    786c:	52 98       	cbi	0x0a, 2	; 10
    786e:	5a 9a       	sbi	0x0b, 2	; 11
    7870:	80 e0       	ldi	r24, 0x00	; 0
    7872:	90 e0       	ldi	r25, 0x00	; 0
    7874:	87 de       	rcall	.-754    	; 0x7584 <rf12_xfer>
    7876:	85 e0       	ldi	r24, 0x05	; 5
    7878:	92 e8       	ldi	r25, 0x82	; 130
    787a:	84 de       	rcall	.-760    	; 0x7584 <rf12_xfer>
    787c:	80 e0       	ldi	r24, 0x00	; 0
    787e:	98 eb       	ldi	r25, 0xB8	; 184
    7880:	02 c0       	rjmp	.+4      	; 0x7886 <rf12_initialize+0x66>
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	90 e0       	ldi	r25, 0x00	; 0
    7886:	7e de       	rcall	.-772    	; 0x7584 <rf12_xfer>
    7888:	4a 9b       	sbis	0x09, 2	; 9
    788a:	fb cf       	rjmp	.-10     	; 0x7882 <rf12_initialize+0x62>
    788c:	8f 2d       	mov	r24, r15
    788e:	90 e0       	ldi	r25, 0x00	; 0
    7890:	44 e0       	ldi	r20, 0x04	; 4
    7892:	88 0f       	add	r24, r24
    7894:	99 1f       	adc	r25, r25
    7896:	4a 95       	dec	r20
    7898:	e1 f7       	brne	.-8      	; 0x7892 <rf12_initialize+0x72>
    789a:	87 6c       	ori	r24, 0xC7	; 199
    789c:	90 68       	ori	r25, 0x80	; 128
    789e:	72 de       	rcall	.-796    	; 0x7584 <rf12_xfer>
    78a0:	80 e4       	ldi	r24, 0x40	; 64
    78a2:	96 ea       	ldi	r25, 0xA6	; 166
    78a4:	6f de       	rcall	.-802    	; 0x7584 <rf12_xfer>
    78a6:	86 e0       	ldi	r24, 0x06	; 6
    78a8:	96 ec       	ldi	r25, 0xC6	; 198
    78aa:	6c de       	rcall	.-808    	; 0x7584 <rf12_xfer>
    78ac:	82 ea       	ldi	r24, 0xA2	; 162
    78ae:	94 e9       	ldi	r25, 0x94	; 148
    78b0:	69 de       	rcall	.-814    	; 0x7584 <rf12_xfer>
    78b2:	8c ea       	ldi	r24, 0xAC	; 172
    78b4:	92 ec       	ldi	r25, 0xC2	; 194
    78b6:	66 de       	rcall	.-820    	; 0x7584 <rf12_xfer>
    78b8:	00 23       	and	r16, r16
    78ba:	39 f0       	breq	.+14     	; 0x78ca <rf12_initialize+0xaa>
    78bc:	83 e8       	ldi	r24, 0x83	; 131
    78be:	9a ec       	ldi	r25, 0xCA	; 202
    78c0:	61 de       	rcall	.-830    	; 0x7584 <rf12_xfer>
    78c2:	80 2f       	mov	r24, r16
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	9e 6c       	ori	r25, 0xCE	; 206
    78c8:	05 c0       	rjmp	.+10     	; 0x78d4 <rf12_initialize+0xb4>
    78ca:	8b e8       	ldi	r24, 0x8B	; 139
    78cc:	9a ec       	ldi	r25, 0xCA	; 202
    78ce:	5a de       	rcall	.-844    	; 0x7584 <rf12_xfer>
    78d0:	8d e2       	ldi	r24, 0x2D	; 45
    78d2:	9e ec       	ldi	r25, 0xCE	; 206
    78d4:	57 de       	rcall	.-850    	; 0x7584 <rf12_xfer>
    78d6:	83 e8       	ldi	r24, 0x83	; 131
    78d8:	94 ec       	ldi	r25, 0xC4	; 196
    78da:	54 de       	rcall	.-856    	; 0x7584 <rf12_xfer>
    78dc:	80 e5       	ldi	r24, 0x50	; 80
    78de:	98 e9       	ldi	r25, 0x98	; 152
    78e0:	51 de       	rcall	.-862    	; 0x7584 <rf12_xfer>
    78e2:	87 e7       	ldi	r24, 0x77	; 119
    78e4:	9c ec       	ldi	r25, 0xCC	; 204
    78e6:	4e de       	rcall	.-868    	; 0x7584 <rf12_xfer>
    78e8:	80 e0       	ldi	r24, 0x00	; 0
    78ea:	90 ee       	ldi	r25, 0xE0	; 224
    78ec:	4b de       	rcall	.-874    	; 0x7584 <rf12_xfer>
    78ee:	80 e0       	ldi	r24, 0x00	; 0
    78f0:	98 ec       	ldi	r25, 0xC8	; 200
    78f2:	48 de       	rcall	.-880    	; 0x7584 <rf12_xfer>
    78f4:	89 e4       	ldi	r24, 0x49	; 73
    78f6:	90 ec       	ldi	r25, 0xC0	; 192
    78f8:	45 de       	rcall	.-886    	; 0x7584 <rf12_xfer>
    78fa:	84 e0       	ldi	r24, 0x04	; 4
    78fc:	80 93 c3 01 	sts	0x01C3, r24
    7900:	1f 91       	pop	r17
    7902:	0f 91       	pop	r16
    7904:	ff 90       	pop	r15
    7906:	08 95       	ret

00007908 <rf12_sendWait>:
    7908:	01 c0       	rjmp	.+2      	; 0x790c <rf12_sendWait+0x4>
    790a:	54 de       	rcall	.-856    	; 0x75b4 <rf12_recvDone>
    790c:	80 91 c3 01 	lds	r24, 0x01C3
    7910:	84 30       	cpi	r24, 0x04	; 4
    7912:	dc f3       	brlt	.-10     	; 0x790a <rf12_sendWait+0x2>
    7914:	08 95       	ret

00007916 <calcCRC>:

// Watchdog functions. These are only safe with interrupts turned off.
static void watchdogReset() {
  __asm__ __volatile__ (
    "wdr\n"
  );
    7916:	fc 01       	movw	r30, r24
    7918:	2f ef       	ldi	r18, 0xFF	; 255
    791a:	3f ef       	ldi	r19, 0xFF	; 255
    791c:	18 c0       	rjmp	.+48     	; 0x794e <calcCRC+0x38>
}

static void flash_led(uint8_t count) {
    791e:	81 91       	ld	r24, Z+
    7920:	28 27       	eor	r18, r24
    7922:	82 2f       	mov	r24, r18
    7924:	82 95       	swap	r24
    7926:	82 27       	eor	r24, r18
    7928:	08 2e       	mov	r0, r24
    792a:	86 95       	lsr	r24
    792c:	86 95       	lsr	r24
    792e:	80 25       	eor	r24, r0
    7930:	08 2e       	mov	r0, r24
    7932:	86 95       	lsr	r24
    7934:	80 25       	eor	r24, r0
    7936:	87 70       	andi	r24, 0x07	; 7
    7938:	02 2e       	mov	r0, r18
    793a:	23 2f       	mov	r18, r19
    793c:	86 95       	lsr	r24
    793e:	07 94       	ror	r0
    7940:	87 95       	ror	r24
    7942:	30 2d       	mov	r19, r0
    7944:	28 27       	eor	r18, r24
    7946:	06 94       	lsr	r0
    7948:	87 95       	ror	r24
    794a:	30 25       	eor	r19, r0
    794c:	28 27       	eor	r18, r24
static void watchdogReset() {
  __asm__ __volatile__ (
    "wdr\n"
  );
}

    794e:	61 50       	subi	r22, 0x01	; 1
    7950:	70 40       	sbci	r23, 0x00	; 0
    7952:	8f ef       	ldi	r24, 0xFF	; 255
    7954:	6f 3f       	cpi	r22, 0xFF	; 255
    7956:	78 07       	cpc	r23, r24
    7958:	11 f7       	brne	.-60     	; 0x791e <calcCRC+0x8>
static void flash_led(uint8_t count) {
  do {
    timer_start(200);
		while(!timer_done())
    795a:	c9 01       	movw	r24, r18
    795c:	08 95       	ret

0000795e <writeFlash>:
// print word in hex
static void P_X16(uint16_t v) {
	P_X8(v>>8);
	P_X8(v&0xFF);
}
// print array of bytes
    795e:	cf 93       	push	r28
    7960:	df 93       	push	r29
    7962:	ec 01       	movw	r28, r24
static void P_A(void *arr, uint8_t n) {
    7964:	81 e1       	ldi	r24, 0x11	; 17
    7966:	91 e0       	ldi	r25, 0x01	; 1
    7968:	dc dd       	rcall	.-1096   	; 0x7522 <P>
    796a:	ce 01       	movw	r24, r28
    796c:	fa dd       	rcall	.-1036   	; 0x7562 <P_X16>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    796e:	8a e0       	ldi	r24, 0x0A	; 10
    7970:	d0 dd       	rcall	.-1120   	; 0x7512 <putch>
}
// print array of bytes
static void P_A(void *arr, uint8_t n) {
	uint8_t *v = arr;
	P_X16((uint16_t)v);
	P(": ");
    7972:	83 e0       	ldi	r24, 0x03	; 3
    7974:	fe 01       	movw	r30, r28
    7976:	87 bf       	out	0x37, r24	; 55
    7978:	e8 95       	spm
	while (n--) {
    797a:	07 b6       	in	r0, 0x37	; 55
    797c:	00 fc       	sbrc	r0, 0
    797e:	fd cf       	rjmp	.-6      	; 0x797a <writeFlash+0x1c>
    7980:	a4 ec       	ldi	r26, 0xC4	; 196
    7982:	b1 e0       	ldi	r27, 0x01	; 1
    7984:	fe 01       	movw	r30, r28
		P_X8(*v++); putch(' ');
	}
	P_LN();
    7986:	21 e0       	ldi	r18, 0x01	; 1
    7988:	8d 91       	ld	r24, X+
    798a:	9d 91       	ld	r25, X+
    798c:	0c 01       	movw	r0, r24
    798e:	27 bf       	out	0x37, r18	; 55
    7990:	e8 95       	spm
    7992:	11 24       	eor	r1, r1
    7994:	32 96       	adiw	r30, 0x02	; 2
	uint8_t *v = arr;
	P_X16((uint16_t)v);
	P(": ");
	while (n--) {
		P_X8(*v++); putch(' ');
	}
    7996:	82 e0       	ldi	r24, 0x02	; 2
    7998:	a4 34       	cpi	r26, 0x44	; 68
    799a:	b8 07       	cpc	r27, r24
    799c:	a9 f7       	brne	.-22     	; 0x7988 <writeFlash+0x2a>
	P_LN();
}

    799e:	85 e0       	ldi	r24, 0x05	; 5
    79a0:	fe 01       	movw	r30, r28
    79a2:	87 bf       	out	0x37, r24	; 55
    79a4:	e8 95       	spm
#else
    79a6:	07 b6       	in	r0, 0x37	; 55
    79a8:	00 fc       	sbrc	r0, 0
    79aa:	fd cf       	rjmp	.-6      	; 0x79a6 <writeFlash+0x48>
#define P(...)
    79ac:	81 e1       	ldi	r24, 0x11	; 17
    79ae:	87 bf       	out	0x37, r24	; 55
    79b0:	e8 95       	spm
#define P_X8(...)
    79b2:	df 91       	pop	r29
    79b4:	cf 91       	pop	r28
    79b6:	08 95       	ret

000079b8 <exponentialBackOff>:
    79b8:	1f 93       	push	r17
    79ba:	88 e1       	ldi	r24, 0x18	; 24
    79bc:	91 e0       	ldi	r25, 0x01	; 1
    79be:	b1 dd       	rcall	.-1182   	; 0x7522 <P>
    79c0:	10 91 84 02 	lds	r17, 0x0284
    79c4:	81 2f       	mov	r24, r17
    79c6:	b9 dd       	rcall	.-1166   	; 0x753a <P_X8>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    79c8:	8a e0       	ldi	r24, 0x0A	; 10
    79ca:	a3 dd       	rcall	.-1210   	; 0x7512 <putch>
    79cc:	6d e3       	ldi	r22, 0x3D	; 61
    79ce:	70 e0       	ldi	r23, 0x00	; 0
    79d0:	80 e0       	ldi	r24, 0x00	; 0
    79d2:	90 e0       	ldi	r25, 0x00	; 0
    79d4:	01 2e       	mov	r0, r17
    79d6:	04 c0       	rjmp	.+8      	; 0x79e0 <exponentialBackOff+0x28>
    79d8:	66 0f       	add	r22, r22
    79da:	77 1f       	adc	r23, r23
    79dc:	88 1f       	adc	r24, r24
    79de:	99 1f       	adc	r25, r25
    79e0:	0a 94       	dec	r0
    79e2:	d2 f7       	brpl	.-12     	; 0x79d8 <exponentialBackOff+0x20>
    79e4:	69 dd       	rcall	.-1326   	; 0x74b8 <sleep>
    79e6:	18 30       	cpi	r17, 0x08	; 8
    79e8:	18 f4       	brcc	.+6      	; 0x79f0 <exponentialBackOff+0x38>
    79ea:	1f 5f       	subi	r17, 0xFF	; 255
    79ec:	10 93 84 02 	sts	0x0284, r17
    79f0:	1f 91       	pop	r17
    79f2:	08 95       	ret

000079f4 <appIsValid>:
    79f4:	cf 93       	push	r28
    79f6:	df 93       	push	r29
    79f8:	20 91 e8 02 	lds	r18, 0x02E8
    79fc:	30 91 e9 02 	lds	r19, 0x02E9
    7a00:	54 e0       	ldi	r21, 0x04	; 4
    7a02:	22 0f       	add	r18, r18
    7a04:	33 1f       	adc	r19, r19
    7a06:	5a 95       	dec	r21
    7a08:	e1 f7       	brne	.-8      	; 0x7a02 <appIsValid+0xe>
    7a0a:	cf ef       	ldi	r28, 0xFF	; 255
    7a0c:	df ef       	ldi	r29, 0xFF	; 255
    7a0e:	80 e0       	ldi	r24, 0x00	; 0
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	1a c0       	rjmp	.+52     	; 0x7a48 <appIsValid+0x54>
    7a14:	fc 01       	movw	r30, r24
    LED_PIN |= _BV(LED);
    watchdogReset();
  } while (--count);
}

#else
    7a16:	01 96       	adiw	r24, 0x01	; 1
    7a18:	e4 91       	lpm	r30, Z+
    7a1a:	ce 27       	eor	r28, r30
    7a1c:	4c 2f       	mov	r20, r28
    7a1e:	42 95       	swap	r20
    7a20:	4c 27       	eor	r20, r28
    7a22:	04 2e       	mov	r0, r20
    7a24:	46 95       	lsr	r20
    7a26:	46 95       	lsr	r20
    7a28:	40 25       	eor	r20, r0
    7a2a:	04 2e       	mov	r0, r20
    7a2c:	46 95       	lsr	r20
    7a2e:	40 25       	eor	r20, r0
    7a30:	47 70       	andi	r20, 0x07	; 7
    7a32:	0c 2e       	mov	r0, r28
    7a34:	cd 2f       	mov	r28, r29
    7a36:	46 95       	lsr	r20
    7a38:	07 94       	ror	r0
    7a3a:	47 95       	ror	r20
    7a3c:	d0 2d       	mov	r29, r0
    7a3e:	c4 27       	eor	r28, r20
    7a40:	06 94       	lsr	r0
    7a42:	47 95       	ror	r20
    7a44:	d0 25       	eor	r29, r0
    7a46:	c4 27       	eor	r28, r20
			;
    LED_PIN |= _BV(LED);
    watchdogReset();
  } while (--count);
}

    7a48:	82 17       	cp	r24, r18
    7a4a:	93 07       	cpc	r25, r19
    7a4c:	19 f7       	brne	.-58     	; 0x7a14 <appIsValid+0x20>
#else
#define flash_led(x)
#endif

//===== SERIAL PRINTING =====
#if DEBUG & 2
    7a4e:	81 e2       	ldi	r24, 0x21	; 33
    7a50:	91 e0       	ldi	r25, 0x01	; 1
    7a52:	67 dd       	rcall	.-1330   	; 0x7522 <P>
    7a54:	ce 01       	movw	r24, r28
    7a56:	85 dd       	rcall	.-1270   	; 0x7562 <P_X16>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    7a58:	8a e0       	ldi	r24, 0x0A	; 10
    7a5a:	5b dd       	rcall	.-1354   	; 0x7512 <putch>
    7a5c:	88 e2       	ldi	r24, 0x28	; 40
    7a5e:	91 e0       	ldi	r25, 0x01	; 1
    7a60:	60 dd       	rcall	.-1344   	; 0x7522 <P>
    7a62:	ce 01       	movw	r24, r28
    7a64:	7e dd       	rcall	.-1284   	; 0x7562 <P_X16>
    7a66:	8c e2       	ldi	r24, 0x2C	; 44
    7a68:	91 e0       	ldi	r25, 0x01	; 1
    7a6a:	5b dd       	rcall	.-1354   	; 0x7522 <P>
    7a6c:	80 91 ea 02 	lds	r24, 0x02EA
    7a70:	90 91 eb 02 	lds	r25, 0x02EB
    7a74:	76 dd       	rcall	.-1300   	; 0x7562 <P_X16>
    7a76:	80 91 ea 02 	lds	r24, 0x02EA
    7a7a:	90 91 eb 02 	lds	r25, 0x02EB
    7a7e:	c8 17       	cp	r28, r24
    7a80:	d9 07       	cpc	r29, r25
    7a82:	19 f0       	breq	.+6      	; 0x7a8a <appIsValid+0x96>
    7a84:	83 e3       	ldi	r24, 0x33	; 51
    7a86:	91 e0       	ldi	r25, 0x01	; 1
    7a88:	02 c0       	rjmp	.+4      	; 0x7a8e <appIsValid+0x9a>
    7a8a:	88 e3       	ldi	r24, 0x38	; 56
    7a8c:	91 e0       	ldi	r25, 0x01	; 1
    7a8e:	49 dd       	rcall	.-1390   	; 0x7522 <P>
    7a90:	20 e0       	ldi	r18, 0x00	; 0
    7a92:	30 e0       	ldi	r19, 0x00	; 0
    7a94:	80 91 ea 02 	lds	r24, 0x02EA
    7a98:	90 91 eb 02 	lds	r25, 0x02EB
    7a9c:	c8 17       	cp	r28, r24
    7a9e:	d9 07       	cpc	r29, r25
    7aa0:	11 f4       	brne	.+4      	; 0x7aa6 <appIsValid+0xb2>
    7aa2:	21 e0       	ldi	r18, 0x01	; 1
    7aa4:	30 e0       	ldi	r19, 0x00	; 0
    7aa6:	c9 01       	movw	r24, r18
    7aa8:	df 91       	pop	r29
    7aaa:	cf 91       	pop	r28
    7aac:	08 95       	ret

00007aae <loadConfig>:
    7aae:	cf 93       	push	r28
    7ab0:	df 93       	push	r29
    7ab2:	ae ec       	ldi	r26, 0xCE	; 206
    7ab4:	b2 e0       	ldi	r27, 0x02	; 2
    7ab6:	e0 ee       	ldi	r30, 0xE0	; 224
    7ab8:	ff ef       	ldi	r31, 0xFF	; 255
    7aba:	84 91       	lpm	r24, Z+
    7abc:	8d 93       	st	X+, r24
    7abe:	31 96       	adiw	r30, 0x01	; 1
    7ac0:	e1 f7       	brne	.-8      	; 0x7aba <loadConfig+0xc>
    7ac2:	8d e3       	ldi	r24, 0x3D	; 61
    7ac4:	91 e0       	ldi	r25, 0x01	; 1
    7ac6:	2d dd       	rcall	.-1446   	; 0x7522 <P>
	P_X8(v&0xFF);
}
// print array of bytes
static void P_A(void *arr, uint8_t n) {
	uint8_t *v = arr;
	P_X16((uint16_t)v);
    7ac8:	8e ec       	ldi	r24, 0xCE	; 206
    7aca:	92 e0       	ldi	r25, 0x02	; 2
    7acc:	4a dd       	rcall	.-1388   	; 0x7562 <P_X16>
	P(": ");
    7ace:	85 e4       	ldi	r24, 0x45	; 69
    7ad0:	91 e0       	ldi	r25, 0x01	; 1
    7ad2:	27 dd       	rcall	.-1458   	; 0x7522 <P>
    7ad4:	ce ec       	ldi	r28, 0xCE	; 206
    7ad6:	d2 e0       	ldi	r29, 0x02	; 2
    7ad8:	04 c0       	rjmp	.+8      	; 0x7ae2 <loadConfig+0x34>
	while (n--) {
		P_X8(*v++); putch(' ');
    7ada:	89 91       	ld	r24, Y+
    7adc:	2e dd       	rcall	.-1444   	; 0x753a <P_X8>
    7ade:	80 e2       	ldi	r24, 0x20	; 32
    7ae0:	18 dd       	rcall	.-1488   	; 0x7512 <putch>
// print array of bytes
static void P_A(void *arr, uint8_t n) {
	uint8_t *v = arr;
	P_X16((uint16_t)v);
	P(": ");
	while (n--) {
    7ae2:	82 e0       	ldi	r24, 0x02	; 2
    7ae4:	ce 3e       	cpi	r28, 0xEE	; 238
    7ae6:	d8 07       	cpc	r29, r24
    7ae8:	c1 f7       	brne	.-16     	; 0x7ada <loadConfig+0x2c>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    7aea:	8a e0       	ldi	r24, 0x0A	; 10
    7aec:	12 dd       	rcall	.-1500   	; 0x7512 <putch>
    7aee:	a0 97       	sbiw	r28, 0x20	; 32
    7af0:	ce 01       	movw	r24, r28
    7af2:	60 e2       	ldi	r22, 0x20	; 32
    7af4:	70 e0       	ldi	r23, 0x00	; 0
    7af6:	0f df       	rcall	.-482    	; 0x7916 <calcCRC>
    7af8:	89 2b       	or	r24, r25
    7afa:	a1 f0       	breq	.+40     	; 0x7b24 <loadConfig+0x76>
    7afc:	88 e4       	ldi	r24, 0x48	; 72
    7afe:	91 e0       	ldi	r25, 0x01	; 1
    7b00:	10 dd       	rcall	.-1504   	; 0x7522 <P>
    7b02:	80 e2       	ldi	r24, 0x20	; 32
    7b04:	fe 01       	movw	r30, r28
    7b06:	11 92       	st	Z+, r1
    7b08:	8a 95       	dec	r24
    7b0a:	e9 f7       	brne	.-6      	; 0x7b06 <loadConfig+0x58>
    7b0c:	80 e0       	ldi	r24, 0x00	; 0
    7b0e:	91 e0       	ldi	r25, 0x01	; 1
    7b10:	a0 e0       	ldi	r26, 0x00	; 0
    7b12:	b0 e0       	ldi	r27, 0x00	; 0
    7b14:	80 93 ce 02 	sts	0x02CE, r24
    7b18:	90 93 cf 02 	sts	0x02CF, r25
    7b1c:	a0 93 d0 02 	sts	0x02D0, r26
    7b20:	b0 93 d1 02 	sts	0x02D1, r27
    7b24:	df 91       	pop	r29
    7b26:	cf 91       	pop	r28
    7b28:	08 95       	ret

00007b2a <fillFlash>:
#else
#define P(...)
#define P_X8(...)
#define P_X16(...)
#define P_A(...)
#define P_LN(...)
    7b2a:	ef 92       	push	r14
    7b2c:	ff 92       	push	r15
    7b2e:	0f 93       	push	r16
    7b30:	1f 93       	push	r17
    7b32:	cf 93       	push	r28
    7b34:	df 93       	push	r29
    7b36:	7c 01       	movw	r14, r24
#endif

    7b38:	ec 01       	movw	r28, r24
    7b3a:	cf 77       	andi	r28, 0x7F	; 127
    7b3c:	d0 70       	andi	r29, 0x00	; 0
    7b3e:	04 2f       	mov	r16, r20
    7b40:	10 e0       	ldi	r17, 0x00	; 0
    7b42:	ce 01       	movw	r24, r28
    7b44:	8e 77       	andi	r24, 0x7E	; 126
    7b46:	90 70       	andi	r25, 0x00	; 0
    7b48:	8c 53       	subi	r24, 0x3C	; 60
    7b4a:	9e 4f       	sbci	r25, 0xFE	; 254
    7b4c:	a8 01       	movw	r20, r16
    7b4e:	f2 d0       	rcall	.+484    	; 0x7d34 <memcpy>
    7b50:	0c 0f       	add	r16, r28
    7b52:	1d 1f       	adc	r17, r29
    7b54:	00 38       	cpi	r16, 0x80	; 128
    7b56:	11 05       	cpc	r17, r1
    7b58:	60 f0       	brcs	.+24     	; 0x7b72 <fillFlash+0x48>
    7b5a:	c7 01       	movw	r24, r14
    7b5c:	8c 1b       	sub	r24, r28
    7b5e:	9d 0b       	sbc	r25, r29
    7b60:	fe de       	rcall	.-516    	; 0x795e <writeFlash>
    7b62:	00 58       	subi	r16, 0x80	; 128
    7b64:	10 40       	sbci	r17, 0x00	; 0
    7b66:	84 ec       	ldi	r24, 0xC4	; 196
    7b68:	91 e0       	ldi	r25, 0x01	; 1
    7b6a:	64 e4       	ldi	r22, 0x44	; 68
    7b6c:	72 e0       	ldi	r23, 0x02	; 2
    7b6e:	a8 01       	movw	r20, r16
    7b70:	e1 d0       	rcall	.+450    	; 0x7d34 <memcpy>
    7b72:	df 91       	pop	r29
    7b74:	cf 91       	pop	r28
    7b76:	1f 91       	pop	r17
    7b78:	0f 91       	pop	r16
    7b7a:	ff 90       	pop	r15
    7b7c:	ef 90       	pop	r14
    7b7e:	08 95       	ret

00007b80 <saveConfig>:
    7b80:	8e ec       	ldi	r24, 0xCE	; 206
    7b82:	92 e0       	ldi	r25, 0x02	; 2
    7b84:	60 e2       	ldi	r22, 0x20	; 32
    7b86:	70 e0       	ldi	r23, 0x00	; 0
    7b88:	c6 de       	rcall	.-628    	; 0x7916 <calcCRC>
    7b8a:	89 2b       	or	r24, r25
    7b8c:	e9 f0       	breq	.+58     	; 0x7bc8 <saveConfig+0x48>
    7b8e:	8e ec       	ldi	r24, 0xCE	; 206
    7b90:	92 e0       	ldi	r25, 0x02	; 2
    7b92:	6e e1       	ldi	r22, 0x1E	; 30
    7b94:	70 e0       	ldi	r23, 0x00	; 0
    7b96:	bf de       	rcall	.-642    	; 0x7916 <calcCRC>
    7b98:	90 93 ed 02 	sts	0x02ED, r25
    7b9c:	80 93 ec 02 	sts	0x02EC, r24
    7ba0:	90 e0       	ldi	r25, 0x00	; 0
    7ba2:	e9 2f       	mov	r30, r25
    7ba4:	f0 e0       	ldi	r31, 0x00	; 0
    7ba6:	e0 58       	subi	r30, 0x80	; 128
    7ba8:	f0 40       	sbci	r31, 0x00	; 0
    7baa:	84 91       	lpm	r24, Z+
    7bac:	e0 58       	subi	r30, 0x80	; 128
    7bae:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb0:	ec 53       	subi	r30, 0x3C	; 60
    7bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    7bb4:	80 83       	st	Z, r24
    7bb6:	9f 5f       	subi	r25, 0xFF	; 255
    7bb8:	90 38       	cpi	r25, 0x80	; 128
    7bba:	99 f7       	brne	.-26     	; 0x7ba2 <saveConfig+0x22>
    7bbc:	80 ee       	ldi	r24, 0xE0	; 224
    7bbe:	9f ef       	ldi	r25, 0xFF	; 255
    7bc0:	6e ec       	ldi	r22, 0xCE	; 206
    7bc2:	72 e0       	ldi	r23, 0x02	; 2
    7bc4:	40 e2       	ldi	r20, 0x20	; 32
    7bc6:	b1 cf       	rjmp	.-158    	; 0x7b2a <fillFlash>
    7bc8:	08 95       	ret

00007bca <rf12_sendNow>:
    7bca:	0f 93       	push	r16
    7bcc:	1f 93       	push	r17
    7bce:	cf 93       	push	r28
    7bd0:	df 93       	push	r29
    7bd2:	18 2f       	mov	r17, r24
    7bd4:	eb 01       	movw	r28, r22
    7bd6:	04 2f       	mov	r16, r20
    7bd8:	80 91 c3 01 	lds	r24, 0x01C3
    7bdc:	85 30       	cpi	r24, 0x05	; 5
    7bde:	e1 f4       	brne	.+56     	; 0x7c18 <rf12_sendNow+0x4e>
    7be0:	80 91 c2 01 	lds	r24, 0x01C2
    7be4:	88 23       	and	r24, r24
    7be6:	c1 f4       	brne	.+48     	; 0x7c18 <rf12_sendNow+0x4e>
    7be8:	c7 dc       	rcall	.-1650   	; 0x7578 <rf12_byte>
    7bea:	80 fd       	sbrc	r24, 0
    7bec:	15 c0       	rjmp	.+42     	; 0x7c18 <rf12_sendNow+0x4e>
    7bee:	8d e0       	ldi	r24, 0x0D	; 13
    7bf0:	92 e8       	ldi	r25, 0x82	; 130
    7bf2:	c8 dc       	rcall	.-1648   	; 0x7584 <rf12_xfer>
    7bf4:	84 e0       	ldi	r24, 0x04	; 4
    7bf6:	80 93 c3 01 	sts	0x01C3, r24
    7bfa:	80 91 c1 01 	lds	r24, 0x01C1
    7bfe:	80 93 85 02 	sts	0x0285, r24
    7c02:	00 93 87 02 	sts	0x0287, r16
    7c06:	40 2f       	mov	r20, r16
    7c08:	50 e0       	ldi	r21, 0x00	; 0
    7c0a:	88 e8       	ldi	r24, 0x88	; 136
    7c0c:	92 e0       	ldi	r25, 0x02	; 2
    7c0e:	be 01       	movw	r22, r28
    7c10:	91 d0       	rcall	.+290    	; 0x7d34 <memcpy>
    7c12:	16 ff       	sbrs	r17, 6
    7c14:	03 c0       	rjmp	.+6      	; 0x7c1c <rf12_sendNow+0x52>
    7c16:	07 c0       	rjmp	.+14     	; 0x7c26 <rf12_sendNow+0x5c>
    7c18:	cd dc       	rcall	.-1638   	; 0x75b4 <rf12_recvDone>
    7c1a:	de cf       	rjmp	.-68     	; 0x7bd8 <rf12_sendNow+0xe>
    7c1c:	10 7e       	andi	r17, 0xE0	; 224
    7c1e:	80 91 c0 01 	lds	r24, 0x01C0
    7c22:	8f 71       	andi	r24, 0x1F	; 31
    7c24:	18 0f       	add	r17, r24
    7c26:	10 93 86 02 	sts	0x0286, r17
    7c2a:	8f ef       	ldi	r24, 0xFF	; 255
    7c2c:	9f ef       	ldi	r25, 0xFF	; 255
    7c2e:	90 93 cd 02 	sts	0x02CD, r25
    7c32:	80 93 cc 02 	sts	0x02CC, r24
    7c36:	80 91 cc 02 	lds	r24, 0x02CC
    7c3a:	90 91 cd 02 	lds	r25, 0x02CD
    7c3e:	20 91 85 02 	lds	r18, 0x0285
    7c42:	82 27       	eor	r24, r18
    7c44:	28 2f       	mov	r18, r24
    7c46:	22 95       	swap	r18
    7c48:	28 27       	eor	r18, r24
    7c4a:	02 2e       	mov	r0, r18
    7c4c:	26 95       	lsr	r18
    7c4e:	26 95       	lsr	r18
    7c50:	20 25       	eor	r18, r0
    7c52:	02 2e       	mov	r0, r18
    7c54:	26 95       	lsr	r18
    7c56:	20 25       	eor	r18, r0
    7c58:	27 70       	andi	r18, 0x07	; 7
    7c5a:	08 2e       	mov	r0, r24
    7c5c:	89 2f       	mov	r24, r25
    7c5e:	26 95       	lsr	r18
    7c60:	07 94       	ror	r0
    7c62:	27 95       	ror	r18
    7c64:	90 2d       	mov	r25, r0
    7c66:	82 27       	eor	r24, r18
    7c68:	06 94       	lsr	r0
    7c6a:	27 95       	ror	r18
    7c6c:	90 25       	eor	r25, r0
    7c6e:	82 27       	eor	r24, r18
    7c70:	90 93 cd 02 	sts	0x02CD, r25
    7c74:	80 93 cc 02 	sts	0x02CC, r24
    7c78:	86 e0       	ldi	r24, 0x06	; 6
    7c7a:	80 93 c3 01 	sts	0x01C3, r24
    7c7e:	8d e3       	ldi	r24, 0x3D	; 61
    7c80:	92 e8       	ldi	r25, 0x82	; 130
    7c82:	80 dc       	rcall	.-1792   	; 0x7584 <rf12_xfer>
    7c84:	df 91       	pop	r29
    7c86:	cf 91       	pop	r28
    7c88:	1f 91       	pop	r17
    7c8a:	0f 91       	pop	r16
    7c8c:	08 95       	ret

00007c8e <sendRequest>:
// UART STUFF
#define BAUD_RATE 57600L
# define UART_SRA UCSR0A
# define UART_SRB UCSR0B
# define UART_SRC UCSR0C
# define UART_SRL UBRR0L
    7c8e:	cf 92       	push	r12
    7c90:	df 92       	push	r13
    7c92:	ef 92       	push	r14
    7c94:	ff 92       	push	r15
    7c96:	0f 93       	push	r16
    7c98:	1f 93       	push	r17
    7c9a:	8c 01       	movw	r16, r24
    7c9c:	7b 01       	movw	r14, r22
    7c9e:	6a 01       	movw	r12, r20
# define UART_UDR UDR0
    7ca0:	8e e4       	ldi	r24, 0x4E	; 78
    7ca2:	91 e0       	ldi	r25, 0x01	; 1
    7ca4:	3e dc       	rcall	.-1924   	; 0x7522 <P>
    7ca6:	8e 2d       	mov	r24, r14
    7ca8:	48 dc       	rcall	.-1904   	; 0x753a <P_X8>
    7caa:	83 e5       	ldi	r24, 0x53	; 83
    7cac:	91 e0       	ldi	r25, 0x01	; 1
    7cae:	39 dc       	rcall	.-1934   	; 0x7522 <P>

    7cb0:	8c 2d       	mov	r24, r12
    7cb2:	80 6a       	ori	r24, 0xA0	; 160
    7cb4:	b8 01       	movw	r22, r16
    7cb6:	4e 2d       	mov	r20, r14
    7cb8:	88 df       	rcall	.-240    	; 0x7bca <rf12_sendNow>
// print character
    7cba:	80 e0       	ldi	r24, 0x00	; 0
    7cbc:	25 de       	rcall	.-950    	; 0x7908 <rf12_sendWait>
static void putch(char ch) {
    7cbe:	8a ef       	ldi	r24, 0xFA	; 250
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
    7cc2:	d9 db       	rcall	.-2126   	; 0x7476 <timer_start>
    7cc4:	09 c0       	rjmp	.+18     	; 0x7cd8 <sendRequest+0x4a>
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
    7cc6:	f5 db       	rcall	.-2070   	; 0x74b2 <timer_done>
    7cc8:	88 23       	and	r24, r24
    7cca:	31 f0       	breq	.+12     	; 0x7cd8 <sendRequest+0x4a>
}
    7ccc:	86 e5       	ldi	r24, 0x56	; 86
    7cce:	91 e0       	ldi	r25, 0x01	; 1
    7cd0:	28 dc       	rcall	.-1968   	; 0x7522 <P>
    7cd2:	8f ef       	ldi	r24, 0xFF	; 255
    7cd4:	9f ef       	ldi	r25, 0xFF	; 255
    7cd6:	27 c0       	rjmp	.+78     	; 0x7d26 <sendRequest+0x98>
# define UART_SRL UBRR0L
# define UART_UDR UDR0

// print character
static void putch(char ch) {
  while (!(UART_SRA & _BV(UDRE0)));
    7cd8:	6d dc       	rcall	.-1830   	; 0x75b4 <rf12_recvDone>
    7cda:	88 23       	and	r24, r24
    7cdc:	a1 f3       	breq	.-24     	; 0x7cc6 <sendRequest+0x38>
    7cde:	80 91 87 02 	lds	r24, 0x0287
    7ce2:	88 23       	and	r24, r24
    7ce4:	81 f3       	breq	.-32     	; 0x7cc6 <sendRequest+0x38>
  UART_UDR = ch;
}
// print string
static void P(char *str) {
	while (*str) putch(*str++);
    7ce6:	80 91 cc 02 	lds	r24, 0x02CC
    7cea:	90 91 cd 02 	lds	r25, 0x02CD
    7cee:	89 2b       	or	r24, r25
    7cf0:	69 f0       	breq	.+26     	; 0x7d0c <sendRequest+0x7e>
}
    7cf2:	8f e5       	ldi	r24, 0x5F	; 95
    7cf4:	91 e0       	ldi	r25, 0x01	; 1
    7cf6:	15 dc       	rcall	.-2006   	; 0x7522 <P>
    7cf8:	80 91 cc 02 	lds	r24, 0x02CC
    7cfc:	90 91 cd 02 	lds	r25, 0x02CD
    7d00:	30 dc       	rcall	.-1952   	; 0x7562 <P_X16>
// print newline
static inline void P_LN(void) { putch('\n'); }
    7d02:	8a e0       	ldi	r24, 0x0A	; 10
    7d04:	06 dc       	rcall	.-2036   	; 0x7512 <putch>
    7d06:	80 e0       	ldi	r24, 0x00	; 0
    7d08:	90 e0       	ldi	r25, 0x00	; 0
    7d0a:	0d c0       	rjmp	.+26     	; 0x7d26 <sendRequest+0x98>
// print byte in hex
    7d0c:	80 91 87 02 	lds	r24, 0x0287
    7d10:	14 dc       	rcall	.-2008   	; 0x753a <P_X8>
    7d12:	88 e6       	ldi	r24, 0x68	; 104
    7d14:	91 e0       	ldi	r25, 0x01	; 1
    7d16:	05 dc       	rcall	.-2038   	; 0x7522 <P>
    7d18:	80 91 86 02 	lds	r24, 0x0286
    7d1c:	0e dc       	rcall	.-2020   	; 0x753a <P_X8>
// print string
static void P(char *str) {
	while (*str) putch(*str++);
}
// print newline
static inline void P_LN(void) { putch('\n'); }
    7d1e:	8a e0       	ldi	r24, 0x0A	; 10
    7d20:	f8 db       	rcall	.-2064   	; 0x7512 <putch>
    7d22:	81 e0       	ldi	r24, 0x01	; 1
    7d24:	90 e0       	ldi	r25, 0x00	; 0
// print byte in hex
static void P_X8(uint8_t v) {
	uint8_t vh = v>>4;
    7d26:	1f 91       	pop	r17
    7d28:	0f 91       	pop	r16
    7d2a:	ff 90       	pop	r15
    7d2c:	ef 90       	pop	r14
    7d2e:	df 90       	pop	r13
    7d30:	cf 90       	pop	r12
    7d32:	08 95       	ret

00007d34 <memcpy>:
    7d34:	fb 01       	movw	r30, r22
    7d36:	dc 01       	movw	r26, r24
    7d38:	02 c0       	rjmp	.+4      	; 0x7d3e <memcpy+0xa>
    7d3a:	01 90       	ld	r0, Z+
    7d3c:	0d 92       	st	X+, r0
    7d3e:	41 50       	subi	r20, 0x01	; 1
    7d40:	50 40       	sbci	r21, 0x00	; 0
    7d42:	d8 f7       	brcc	.-10     	; 0x7d3a <memcpy+0x6>
    7d44:	08 95       	ret

00007d46 <memset>:
    7d46:	dc 01       	movw	r26, r24
    7d48:	01 c0       	rjmp	.+2      	; 0x7d4c <memset+0x6>
    7d4a:	6d 93       	st	X+, r22
    7d4c:	41 50       	subi	r20, 0x01	; 1
    7d4e:	50 40       	sbci	r21, 0x00	; 0
    7d50:	e0 f7       	brcc	.-8      	; 0x7d4a <memset+0x4>
    7d52:	08 95       	ret

00007d54 <__mulsi3>:
    7d54:	62 9f       	mul	r22, r18
    7d56:	d0 01       	movw	r26, r0
    7d58:	73 9f       	mul	r23, r19
    7d5a:	f0 01       	movw	r30, r0
    7d5c:	82 9f       	mul	r24, r18
    7d5e:	e0 0d       	add	r30, r0
    7d60:	f1 1d       	adc	r31, r1
    7d62:	64 9f       	mul	r22, r20
    7d64:	e0 0d       	add	r30, r0
    7d66:	f1 1d       	adc	r31, r1
    7d68:	92 9f       	mul	r25, r18
    7d6a:	f0 0d       	add	r31, r0
    7d6c:	83 9f       	mul	r24, r19
    7d6e:	f0 0d       	add	r31, r0
    7d70:	74 9f       	mul	r23, r20
    7d72:	f0 0d       	add	r31, r0
    7d74:	65 9f       	mul	r22, r21
    7d76:	f0 0d       	add	r31, r0
    7d78:	99 27       	eor	r25, r25
    7d7a:	72 9f       	mul	r23, r18
    7d7c:	b0 0d       	add	r27, r0
    7d7e:	e1 1d       	adc	r30, r1
    7d80:	f9 1f       	adc	r31, r25
    7d82:	63 9f       	mul	r22, r19
    7d84:	b0 0d       	add	r27, r0
    7d86:	e1 1d       	adc	r30, r1
    7d88:	f9 1f       	adc	r31, r25
    7d8a:	bd 01       	movw	r22, r26
    7d8c:	cf 01       	movw	r24, r30
    7d8e:	11 24       	eor	r1, r1
    7d90:	08 95       	ret

00007d92 <__divmodsi4>:
    7d92:	97 fb       	bst	r25, 7
    7d94:	09 2e       	mov	r0, r25
    7d96:	05 26       	eor	r0, r21
    7d98:	0e d0       	rcall	.+28     	; 0x7db6 <__divmodsi4_neg1>
    7d9a:	57 fd       	sbrc	r21, 7
    7d9c:	04 d0       	rcall	.+8      	; 0x7da6 <__divmodsi4_neg2>
    7d9e:	14 d0       	rcall	.+40     	; 0x7dc8 <__udivmodsi4>
    7da0:	0a d0       	rcall	.+20     	; 0x7db6 <__divmodsi4_neg1>
    7da2:	00 1c       	adc	r0, r0
    7da4:	38 f4       	brcc	.+14     	; 0x7db4 <__divmodsi4_exit>

00007da6 <__divmodsi4_neg2>:
    7da6:	50 95       	com	r21
    7da8:	40 95       	com	r20
    7daa:	30 95       	com	r19
    7dac:	21 95       	neg	r18
    7dae:	3f 4f       	sbci	r19, 0xFF	; 255
    7db0:	4f 4f       	sbci	r20, 0xFF	; 255
    7db2:	5f 4f       	sbci	r21, 0xFF	; 255

00007db4 <__divmodsi4_exit>:
    7db4:	08 95       	ret

00007db6 <__divmodsi4_neg1>:
    7db6:	f6 f7       	brtc	.-4      	; 0x7db4 <__divmodsi4_exit>
    7db8:	90 95       	com	r25
    7dba:	80 95       	com	r24
    7dbc:	70 95       	com	r23
    7dbe:	61 95       	neg	r22
    7dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    7dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc6:	08 95       	ret

00007dc8 <__udivmodsi4>:
    7dc8:	a1 e2       	ldi	r26, 0x21	; 33
    7dca:	1a 2e       	mov	r1, r26
    7dcc:	aa 1b       	sub	r26, r26
    7dce:	bb 1b       	sub	r27, r27
    7dd0:	fd 01       	movw	r30, r26
    7dd2:	0d c0       	rjmp	.+26     	; 0x7dee <__udivmodsi4_ep>

00007dd4 <__udivmodsi4_loop>:
    7dd4:	aa 1f       	adc	r26, r26
    7dd6:	bb 1f       	adc	r27, r27
    7dd8:	ee 1f       	adc	r30, r30
    7dda:	ff 1f       	adc	r31, r31
    7ddc:	a2 17       	cp	r26, r18
    7dde:	b3 07       	cpc	r27, r19
    7de0:	e4 07       	cpc	r30, r20
    7de2:	f5 07       	cpc	r31, r21
    7de4:	20 f0       	brcs	.+8      	; 0x7dee <__udivmodsi4_ep>
    7de6:	a2 1b       	sub	r26, r18
    7de8:	b3 0b       	sbc	r27, r19
    7dea:	e4 0b       	sbc	r30, r20
    7dec:	f5 0b       	sbc	r31, r21

00007dee <__udivmodsi4_ep>:
    7dee:	66 1f       	adc	r22, r22
    7df0:	77 1f       	adc	r23, r23
    7df2:	88 1f       	adc	r24, r24
    7df4:	99 1f       	adc	r25, r25
    7df6:	1a 94       	dec	r1
    7df8:	69 f7       	brne	.-38     	; 0x7dd4 <__udivmodsi4_loop>
    7dfa:	60 95       	com	r22
    7dfc:	70 95       	com	r23
    7dfe:	80 95       	com	r24
    7e00:	90 95       	com	r25
    7e02:	9b 01       	movw	r18, r22
    7e04:	ac 01       	movw	r20, r24
    7e06:	bd 01       	movw	r22, r26
    7e08:	cf 01       	movw	r24, r30
    7e0a:	08 95       	ret
