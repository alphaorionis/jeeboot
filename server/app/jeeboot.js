(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    return $stateProvider.state('home', {
      url: '/',
      templateUrl: 'jeeboot.html',
      controller: 'JeeBootCtrl'
    });
  });

  ng.controller('JeeBootCtrl', function($scope, $timeout, jeebus) {
    $timeout(function() {
      $scope.hwid = jeebus.attach('/jeeboot/hwid/');
      $scope.$on('$destroy', function() {
        return jeebus.detach('/jeeboot/hwid/');
      });
      $scope.swid = jeebus.attach('/jeeboot/swid/');
      return $scope.$on('$destroy', function() {
        return jeebus.detach('/jeeboot/swid/');
      });
    }, 100);
    $scope.onFileDrop = function(x) {
      var f, lastId, r, _i, _len, _results;
      lastId = Object.keys($scope.swid).sort().pop() | 0;
      if (lastId < 999) {
        lastId = 999;
      }
      _results = [];
      for (_i = 0, _len = x.length; _i < _len; _i++) {
        f = x[_i];
        r = new FileReader();
        r.onload = function(e) {
          jeebus.store("/jeeboot/swid/" + (++lastId), {
            file: f.name
          });
          return jeebus.rpc('store', "firmware/" + f.name, e.target.result);
        };
        _results.push(r.readAsText(f));
      }
      return _results;
    };
    $scope.fwDel = function(swid) {
      jeebus.store("/jeeboot/swid/" + swid);
      return jeebus.rpc('store', "firmware/" + $scope.swid[swid].file);
    };
    $scope.hwDel = function(hwid) {
      return jeebus.store("/jeeboot/hwid/" + hwid);
    };
    return $scope.hwSave = function(id, field, value) {
      var row;
      row = $scope.hwid[id];
      row[field] = value | 0;
      return jeebus.store("/jeeboot/hwid/" + id, row);
    };
  });

  ng.directive('contenteditable', function($parse) {
    return {
      restrict: 'A',
      link: function(scope, elm, attr) {
        if (attr.onBlur) {
          return elm.on('blur', function() {
            return scope.$apply(function() {
              var fn;
              fn = $parse(attr.onBlur);
              return fn(scope, {
                $value: elm.text()
              });
            });
          });
        }
      }
    };
  });

  ng.directive('onFileDrop', function($parse) {
    return {
      restrict: 'A',
      link: function(scope, elem, attr) {
        elem[0].addEventListener('dragover', function(evt) {
          evt.stopPropagation();
          evt.preventDefault();
          return elem.addClass('dragActive');
        });
        elem[0].addEventListener('dragleave', function(evt) {
          return elem.removeClass('dragActive');
        });
        return elem[0].addEventListener('drop', function(evt) {
          var fl, fn, x;
          evt.stopPropagation();
          evt.preventDefault();
          elem.removeClass('dragActive');
          fn = $parse(attr.onFileDrop);
          fl = (function() {
            var _i, _len, _ref, _results;
            _ref = evt.dataTransfer.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(x);
            }
            return _results;
          })();
          return fn(scope, {
            $files: fl,
            $event: evt
          });
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYm9vdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEVBQWlCLGNBQWpCLEdBQUE7V0FDUixjQUFjLENBQUMsS0FBZixDQUFxQixNQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLGNBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxhQUZaO0tBREYsRUFEUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBUUEsRUFBRSxDQUFDLFVBQUgsQ0FBYyxhQUFkLEVBQTZCLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsTUFBbkIsR0FBQTtBQUkzQixJQUFBLFFBQUEsQ0FBUyxTQUFBLEdBQUE7QUFDUCxNQUFBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxDQUFkLENBQUE7QUFBQSxNQUNBLE1BQU0sQ0FBQyxHQUFQLENBQVcsVUFBWCxFQUF1QixTQUFBLEdBQUE7ZUFBRyxNQUFNLENBQUMsTUFBUCxDQUFjLGdCQUFkLEVBQUg7TUFBQSxDQUF2QixDQURBLENBQUE7QUFBQSxNQUVBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxDQUZkLENBQUE7YUFHQSxNQUFNLENBQUMsR0FBUCxDQUFXLFVBQVgsRUFBdUIsU0FBQSxHQUFBO2VBQUcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFIO01BQUEsQ0FBdkIsRUFKTztJQUFBLENBQVQsRUFLRSxHQUxGLENBQUEsQ0FBQTtBQUFBLElBT0EsTUFBTSxDQUFDLFVBQVAsR0FBb0IsU0FBQyxDQUFELEdBQUE7QUFDbEIsVUFB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ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ2hvbWUnLFxuICAgIHVybDogJy8nXG4gICAgdGVtcGxhdGVVcmw6ICdqZWVib290Lmh0bWwnXG4gICAgY29udHJvbGxlcjogJ0plZUJvb3RDdHJsJ1xuXG5uZy5jb250cm9sbGVyICdKZWVCb290Q3RybCcsICgkc2NvcGUsICR0aW1lb3V0LCBqZWVidXMpIC0+XG4gICMgVE9ETyByZXdyaXRlIHRoZXNlIGV4YW1wbGUgdG8gdXNlIHRoZSBcImhtXCIgc2VydmljZSBpLnMuby4gXCJqZWVidXNcIlxuXG4gICMgVE9ETyB0aGlzIGRlbGF5IHNlZW1zIHRvIGJlIHJlcXVpcmVkIHRvIGF2b2lkIGFuIGVycm9yIHdpdGggV1Mgc2V0dXAgLSB3aHk/XG4gICR0aW1lb3V0IC0+XG4gICAgJHNjb3BlLmh3aWQgPSBqZWVidXMuYXR0YWNoICcvamVlYm9vdC9od2lkLydcbiAgICAkc2NvcGUuJG9uICckZGVzdHJveScsIC0+IGplZWJ1cy5kZXRhY2ggJy9qZWVib290L2h3aWQvJ1xuICAgICRzY29wZS5zd2lkID0gamVlYnVzLmF0dGFjaCAnL2plZWJvb3Qvc3dpZC8nXG4gICAgJHNjb3BlLiRvbiAnJGRlc3Ryb3knLCAtPiBqZWVidXMuZGV0YWNoICcvamVlYm9vdC9zd2lkLydcbiAgLCAxMDBcblxuICAkc2NvcGUub25GaWxlRHJvcCA9ICh4KSAtPlxuICAgIGxhc3RJZCA9IE9iamVjdC5rZXlzKCRzY29wZS5zd2lkKS5zb3J0KCkucG9wKCkgfCAwXG4gICAgbGFzdElkID0gOTk5ICBpZiBsYXN0SWQgPCA5OTlcbiAgICBmb3IgZiBpbiB4XG4gICAgICByID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgICAgci5vbmxvYWQgPSAoZSkgLT5cbiAgICAgICAgamVlYnVzLnN0b3JlIFwiL2plZWJvb3Qvc3dpZC8jeysrbGFzdElkfVwiLCBmaWxlOiBmLm5hbWVcbiAgICAgICAgamVlYnVzLnJwYyAnc3RvcmUnLCBcImZpcm13YXJlLyN7Zi5uYW1lfVwiLCBlLnRhcmdldC5yZXN1bHRcbiAgICAgIHIucmVhZEFzVGV4dCBmXG5cbiAgJHNjb3BlLmZ3RGVsID0gKHN3aWQpIC0+XG4gICAgamVlYnVzLnN0b3JlIFwiL2plZWJvb3Qvc3dpZC8je3N3aWR9XCJcbiAgICBqZWVidXMucnBjICdzdG9yZScsIFwiZmlybXdhcmUvI3skc2NvcGUuc3dpZFtzd2lkXS5maWxlfVwiXG5cbiAgJHNjb3BlLmh3RGVsID0gKGh3aWQpIC0+XG4gICAgamVlYnVzLnN0b3JlIFwiL2plZWJvb3QvaHdpZC8je2h3aWR9XCJcblxuICAkc2NvcGUuaHdTYXZlID0gKGlkLCBmaWVsZCwgdmFsdWUpIC0+XG4gICAgcm93ID0gJHNjb3BlLmh3aWRbaWRdXG4gICAgcm93W2ZpZWxkXSA9IHZhbHVlIHwgMCAjIFRPRE8gaGFyZC1jb2RlZCBpbnQgY29udmVyc2lvblxuICAgIGplZWJ1cy5zdG9yZSBcIi9qZWVib290L2h3aWQvI3tpZH1cIiwgcm93XG5cbiMgc2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvZ3VpZGUvZm9ybXNcbm5nLmRpcmVjdGl2ZSAnY29udGVudGVkaXRhYmxlJywgKCRwYXJzZSkgLT5cbiAgcmVzdHJpY3Q6ICdBJ1xuICBsaW5rOiAoc2NvcGUsIGVsbSwgYXR0cikgLT5cbiAgICBpZiBhdHRyLm9uQmx1clxuICAgICAgZWxtLm9uICdibHVyJywgLT5cbiAgICAgICAgc2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgZm4gPSAkcGFyc2UgYXR0ci5vbkJsdXJcbiAgICAgICAgICBmbiBzY29wZSwgJHZhbHVlOiBlbG0udGV4dCgpXG5cbiMgc2VlIGFsc28gZ2l0aHViLmNvbS9kYW5pYWxmYXJpZC9hbmd1bGFyLWZpbGUtdXBsb2FkXG5uZy5kaXJlY3RpdmUgJ29uRmlsZURyb3AnLCAoJHBhcnNlKSAtPlxuICByZXN0cmljdDogJ0EnXG4gIGxpbms6IChzY29wZSwgZWxlbSwgYXR0cikgLT5cblxuICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lciAnZHJhZ292ZXInLCAoZXZ0KSAtPlxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZWxlbS5hZGRDbGFzcyAnZHJhZ0FjdGl2ZSdcblxuICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lciAnZHJhZ2xlYXZlJywgKGV2dCkgLT5cbiAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MgJ2RyYWdBY3RpdmUnXG5cbiAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIgJ2Ryb3AnLCAoZXZ0KSAtPlxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZWxlbS5yZW1vdmVDbGFzcyAnZHJhZ0FjdGl2ZSdcblxuICAgICAgZm4gPSAkcGFyc2UgYXR0ci5vbkZpbGVEcm9wXG4gICAgICBmbCA9ICh4IGZvciB4IGluIGV2dC5kYXRhVHJhbnNmZXIuZmlsZXMpXG4gICAgICBmbiBzY29wZSwgJGZpbGVzOiBmbCwgJGV2ZW50OiBldnRcbiJdfQ==
