(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider) {
    return $stateProvider.state('home', {
      url: '/',
      templateUrl: 'jeeboot.html',
      controller: 'JeeBootCtrl'
    });
  });

  ng.controller('JeeBootCtrl', function($scope, $timeout, jeebus) {
    $timeout(function() {
      $scope.hwid = jeebus.attach('/jeeboot/hwid/');
      $scope.$on('$destroy', function() {
        return jeebus.detach('/jeeboot/hwid/');
      });
      $scope.swid = jeebus.attach('/jeeboot/swid/');
      return $scope.$on('$destroy', function() {
        return jeebus.detach('/jeeboot/swid/');
      });
    }, 100);
    $scope.onFileDrop = function(x) {
      var f, lastId, r, _i, _len, _results;
      lastId = Object.keys($scope.swid).sort().pop() | 0;
      if (lastId < 999) {
        lastId = 999;
      }
      _results = [];
      for (_i = 0, _len = x.length; _i < _len; _i++) {
        f = x[_i];
        r = new FileReader();
        r.onload = function(e) {
          jeebus.store("/jeeboot/swid/" + (++lastId), {
            file: f.name
          });
          return jeebus.rpc('store', "firmware/" + f.name, e.target.result);
        };
        _results.push(r.readAsText(f));
      }
      return _results;
    };
    $scope.fwDel = function(swid) {
      jeebus.store("/jeeboot/swid/" + swid);
      return jeebus.rpc('store', "firmware/" + $scope.swid[swid].file);
    };
    $scope.hwDel = function(hwid) {
      return jeebus.store("/jeeboot/hwid/" + hwid);
    };
    return $scope.hwSave = function(id, field, value) {
      var row;
      row = $scope.hwid[id];
      row[field] = value | 0;
      return jeebus.store("/jeeboot/hwid/" + id, row);
    };
  });

  ng.directive('contenteditable', function($parse) {
    return {
      restrict: 'A',
      link: function(scope, elm, attr) {
        if (attr.onBlur) {
          return elm.on('blur', function() {
            return scope.$apply(function() {
              var fn;
              fn = $parse(attr.onBlur);
              return fn(scope, {
                $value: elm.text()
              });
            });
          });
        }
      }
    };
  });

  ng.directive('onFileDrop', function($parse) {
    return {
      restrict: 'A',
      link: function(scope, elem, attr) {
        elem[0].addEventListener('dragover', function(evt) {
          evt.stopPropagation();
          evt.preventDefault();
          return elem.addClass('dragActive');
        });
        elem[0].addEventListener('dragleave', function(evt) {
          return elem.removeClass('dragActive');
        });
        return elem[0].addEventListener('drop', function(evt) {
          var fl, fn, x;
          evt.stopPropagation();
          evt.preventDefault();
          elem.removeClass('dragActive');
          fn = $parse(attr.onFileDrop);
          fl = (function() {
            var _i, _len, _ref, _results;
            _ref = evt.dataTransfer.files;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(x);
            }
            return _results;
          })();
          return fn(scope, {
            $files: fl,
            $event: evt
          });
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYm9vdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEdBQUE7V0FDUixjQUFjLENBQUMsS0FBZixDQUFxQixNQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLGNBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxhQUZaO0tBREYsRUFEUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBUUEsRUFBRSxDQUFDLFVBQUgsQ0FBYyxhQUFkLEVBQTZCLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsTUFBbkIsR0FBQTtBQUkzQixJQUFBLFFBQUEsQ0FBUyxTQUFBLEdBQUE7QUFDUCxNQUFBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxDQUFkLENBQUE7QUFBQSxNQUNBLE1BQU0sQ0FBQyxHQUFQLENBQVcsVUFBWCxFQUF1QixTQUFBLEdBQUE7ZUFBRyxNQUFNLENBQUMsTUFBUCxDQUFjLGdCQUFkLEVBQUg7TUFBQSxDQUF2QixDQURBLENBQUE7QUFBQSxNQUVBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxDQUZkLENBQUE7YUFHQSxNQUFNLENBQUMsR0FBUCxDQUFXLFVBQVgsRUFBdUIsU0FBQSxHQUFBO2VBQUcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxnQkFBZCxFQUFIO01BQUEsQ0FBdkIsRUFKTztJQUFBLENBQVQsRUFLRSxHQUxGLENBQUEsQ0FBQTtBQUFBLElBT0EsTUFBTSxDQUFDLFVBQVAsR0FBb0IsU0FBQyxDQUFELEdBQUE7QUFDbEIsVUFBQSxnQ0FBQTtBQUFB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YW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnaG9tZScsXG4gICAgdXJsOiAnLydcbiAgICB0ZW1wbGF0ZVVybDogJ2plZWJvb3QuaHRtbCdcbiAgICBjb250cm9sbGVyOiAnSmVlQm9vdEN0cmwnXG5cbm5nLmNvbnRyb2xsZXIgJ0plZUJvb3RDdHJsJywgKCRzY29wZSwgJHRpbWVvdXQsIGplZWJ1cykgLT5cbiAgIyBUT0RPIHJld3JpdGUgdGhlc2UgZXhhbXBsZSB0byB1c2UgdGhlIFwiaG1cIiBzZXJ2aWNlIGkucy5vLiBcImplZWJ1c1wiXG5cbiAgIyBUT0RPIHRoaXMgZGVsYXkgc2VlbXMgdG8gYmUgcmVxdWlyZWQgdG8gYXZvaWQgYW4gZXJyb3Igd2l0aCBXUyBzZXR1cCAtIHdoeT9cbiAgJHRpbWVvdXQgLT5cbiAgICAkc2NvcGUuaHdpZCA9IGplZWJ1cy5hdHRhY2ggJy9qZWVib290L2h3aWQvJ1xuICAgICRzY29wZS4kb24gJyRkZXN0cm95JywgLT4gamVlYnVzLmRldGFjaCAnL2plZWJvb3QvaHdpZC8nXG4gICAgJHNjb3BlLnN3aWQgPSBqZWVidXMuYXR0YWNoICcvamVlYm9vdC9zd2lkLydcbiAgICAkc2NvcGUuJG9uICckZGVzdHJveScsIC0+IGplZWJ1cy5kZXRhY2ggJy9qZWVib290L3N3aWQvJ1xuICAsIDEwMFxuXG4gICRzY29wZS5vbkZpbGVEcm9wID0gKHgpIC0+XG4gICAgbGFzdElkID0gT2JqZWN0LmtleXMoJHNjb3BlLnN3aWQpLnNvcnQoKS5wb3AoKSB8IDBcbiAgICBsYXN0SWQgPSA5OTkgIGlmIGxhc3RJZCA8IDk5OVxuICAgIGZvciBmIGluIHhcbiAgICAgIHIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICByLm9ubG9hZCA9IChlKSAtPlxuICAgICAgICBqZWVidXMuc3RvcmUgXCIvamVlYm9vdC9zd2lkLyN7KytsYXN0SWR9XCIsIGZpbGU6IGYubmFtZVxuICAgICAgICBqZWVidXMucnBjICdzdG9yZScsIFwiZmlybXdhcmUvI3tmLm5hbWV9XCIsIGUudGFyZ2V0LnJlc3VsdFxuICAgICAgci5yZWFkQXNUZXh0IGZcblxuICAkc2NvcGUuZndEZWwgPSAoc3dpZCkgLT5cbiAgICBqZWVidXMuc3RvcmUgXCIvamVlYm9vdC9zd2lkLyN7c3dpZH1cIlxuICAgIGplZWJ1cy5ycGMgJ3N0b3JlJywgXCJmaXJtd2FyZS8jeyRzY29wZS5zd2lkW3N3aWRdLmZpbGV9XCJcblxuICAkc2NvcGUuaHdEZWwgPSAoaHdpZCkgLT5cbiAgICBqZWVidXMuc3RvcmUgXCIvamVlYm9vdC9od2lkLyN7aHdpZH1cIlxuXG4gICRzY29wZS5od1NhdmUgPSAoaWQsIGZpZWxkLCB2YWx1ZSkgLT5cbiAgICByb3cgPSAkc2NvcGUuaHdpZFtpZF1cbiAgICByb3dbZmllbGRdID0gdmFsdWUgfCAwICMgVE9ETyBoYXJkLWNvZGVkIGludCBjb252ZXJzaW9uXG4gICAgamVlYnVzLnN0b3JlIFwiL2plZWJvb3QvaHdpZC8je2lkfVwiLCByb3dcblxuIyBzZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9ndWlkZS9mb3Jtc1xubmcuZGlyZWN0aXZlICdjb250ZW50ZWRpdGFibGUnLCAoJHBhcnNlKSAtPlxuICByZXN0cmljdDogJ0EnXG4gIGxpbms6IChzY29wZSwgZWxtLCBhdHRyKSAtPlxuICAgIGlmIGF0dHIub25CbHVyXG4gICAgICBlbG0ub24gJ2JsdXInLCAtPlxuICAgICAgICBzY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICBmbiA9ICRwYXJzZSBhdHRyLm9uQmx1clxuICAgICAgICAgIGZuIHNjb3BlLCAkdmFsdWU6IGVsbS50ZXh0KClcblxuIyBzZWUgYWxzbyBnaXRodWIuY29tL2RhbmlhbGZhcmlkL2FuZ3VsYXItZmlsZS11cGxvYWRcbm5nLmRpcmVjdGl2ZSAnb25GaWxlRHJvcCcsICgkcGFyc2UpIC0+XG4gIHJlc3RyaWN0OiAnQSdcbiAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSAtPlxuXG4gICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyICdkcmFnb3ZlcicsIChldnQpIC0+XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlbGVtLmFkZENsYXNzICdkcmFnQWN0aXZlJ1xuXG4gICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyICdkcmFnbGVhdmUnLCAoZXZ0KSAtPlxuICAgICAgZWxlbS5yZW1vdmVDbGFzcyAnZHJhZ0FjdGl2ZSdcblxuICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lciAnZHJvcCcsIChldnQpIC0+XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlbGVtLnJlbW92ZUNsYXNzICdkcmFnQWN0aXZlJ1xuXG4gICAgICBmbiA9ICRwYXJzZSBhdHRyLm9uRmlsZURyb3BcbiAgICAgIGZsID0gKHggZm9yIHggaW4gZXZ0LmRhdGFUcmFuc2Zlci5maWxlcylcbiAgICAgIGZuIHNjb3BlLCAkZmlsZXM6IGZsLCAkZXZlbnQ6IGV2dFxuIl19
